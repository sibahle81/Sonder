//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//		
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using RMA.Common.Database.Contracts.Repository;
using RMA.Service.Admin.MasterDataManager.Contracts.Enums;
using RMA.Service.MediCare.Database.Entities;

namespace RMA.Service.MediCare.Database.Configuration
{
    public class medical_PreAuthRehabilitationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<medical_PreAuthRehabilitation>
    {
        public medical_PreAuthRehabilitationConfiguration()
            : this("medical")
        {
        }

        public medical_PreAuthRehabilitationConfiguration(string schema)
        {
            ToTable("PreAuthRehabilitation", schema);
            HasKey(x => x.PreAuthRehabilitationId);

            Property(x => x.PreAuthRehabilitationId).HasColumnName(@"PreAuthRehabilitationId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.PreAuthId).HasColumnName(@"PreAuthId").HasColumnType("int").IsRequired();
            Property(x => x.IsNewRequest).HasColumnName(@"IsNewRequest").HasColumnType("bit").IsRequired();
            Property(x => x.TherapistName).HasColumnName(@"TherapistName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(80);
            Property(x => x.InitialConsultationDate).HasColumnName(@"InitialConsultationDate").HasColumnType("datetime").IsRequired();
            Property(x => x.TreatmentFrequency).HasColumnName(@"TreatmentFrequency").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(25);
            Property(x => x.TreatmentDuration).HasColumnName(@"TreatmentDuration").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(25);
            Property(x => x.TreatmentSessionCount).HasColumnName(@"TreatmentSessionCount").HasColumnType("int").IsOptional();
            Property(x => x.TreatmentSessionCompletedCount).HasColumnName(@"TreatmentSessionCompletedCount").HasColumnType("int").IsOptional();
            Property(x => x.TreatmentSessionAdditionalCount).HasColumnName(@"TreatmentSessionAdditionalCount").HasColumnType("int").IsOptional();
            Property(x => x.ExtensionAuthFromDate).HasColumnName(@"ExtensionAuthFromDate").HasColumnType("datetime").IsOptional();
            Property(x => x.ExtensionAuthToDate).HasColumnName(@"ExtensionAuthToDate").HasColumnType("datetime").IsOptional();
            Property(x => x.ReferringDoctorId).HasColumnName(@"ReferringDoctorId").HasColumnType("int").IsOptional();
            Property(x => x.ReferringDoctorContact).HasColumnName(@"ReferringDoctorContact").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(30);
            Property(x => x.RehabilitationGoal).HasColumnName(@"RehabilitationGoal").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(2048);
            Property(x => x.RequestStatus).HasColumnName(@"RequestStatus").HasColumnType("bit").IsRequired();
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.PreAuthorisation).WithMany(b => b.PreAuthRehabilitations).HasForeignKey(c => c.PreAuthId).WillCascadeOnDelete(false); // FK_medical_PreAuthRehabilitation_PreAuthID
        }
    }

}
