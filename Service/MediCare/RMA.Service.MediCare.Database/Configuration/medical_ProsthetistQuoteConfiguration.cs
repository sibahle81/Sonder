//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//		
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using RMA.Common.Database.Contracts.Repository;
using RMA.Service.Admin.MasterDataManager.Contracts.Enums;
using RMA.Service.MediCare.Database.Entities;

namespace RMA.Service.MediCare.Database.Configuration
{
    public class medical_ProsthetistQuoteConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<medical_ProsthetistQuote>
    {
        public medical_ProsthetistQuoteConfiguration()
            : this("medical")
        {
        }

        public medical_ProsthetistQuoteConfiguration(string schema)
        {
            ToTable("ProsthetistQuote", schema);
            HasKey(x => x.ProsthetistQuoteId);

            Property(x => x.ProsthetistQuoteId).HasColumnName(@"ProsthetistQuoteId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.RolePlayerId).HasColumnName(@"RolePlayerId").HasColumnType("int").IsRequired();
            Property(x => x.ProsthetistId).HasColumnName(@"ProsthetistId").HasColumnType("int").IsOptional();
            Property(x => x.PensionCaseId).HasColumnName(@"PensionCaseId").HasColumnType("int").IsOptional();
            Property(x => x.ClaimId).HasColumnName(@"ClaimId").HasColumnType("int").IsRequired();
            Property(x => x.QuotationAmount).HasColumnName(@"QuotationAmount").HasColumnType("money").IsOptional().HasPrecision(19,4);
            Property(x => x.Comments).HasColumnName(@"Comments").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(2000);
            Property(x => x.ProstheticType).HasColumnName(@"ProstheticTypeId").HasColumnType("int").IsRequired();
            Property(x => x.ProsTypeSpecification).HasColumnName(@"ProsTypeSpecification").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(200);
            Property(x => x.IsApproved).HasColumnName(@"IsApproved").HasColumnType("bit").IsOptional();
            Property(x => x.ReviewedBy).HasColumnName(@"ReviewedBy").HasColumnType("int").IsOptional();
            Property(x => x.ReviewedDateTime).HasColumnName(@"ReviewedDateTime").HasColumnType("datetime").IsOptional();
            Property(x => x.ReviewedComments).HasColumnName(@"ReviewedComments").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(200);
            Property(x => x.SignedBy).HasColumnName(@"SignedBy").HasColumnType("int").IsOptional();
            Property(x => x.IsSentForReview).HasColumnName(@"IsSentForReview").HasColumnType("bit").IsOptional();
            Property(x => x.ProstheticQuotationType).HasColumnName(@"QuotationTypeID").HasColumnType("int").IsOptional();
            Property(x => x.IsRejected).HasColumnName(@"IsRejected").HasColumnType("bit").IsOptional();
            Property(x => x.IsAutoApproved).HasColumnName(@"IsAutoApproved").HasColumnType("bit").IsOptional();
            Property(x => x.IsRequestInfo).HasColumnName(@"IsRequestInfo").HasColumnType("bit").IsOptional();
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.ProstheticQuoteStatus).HasColumnName(@"ProstheticQuoteStatusId").HasColumnType("int").IsOptional();
            Property(x => x.PreAuthId).HasColumnName(@"PreAuthId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.PreAuthorisation).WithMany(b => b.ProsthetistQuotes).HasForeignKey(c => c.PreAuthId).WillCascadeOnDelete(false); // FK_ProsthetistQuote_PreAuthorisation_PreAuthId
        }
    }

}
