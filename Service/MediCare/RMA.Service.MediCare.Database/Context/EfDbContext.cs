//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//		
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using RMA.Common.Database.Contracts.Repository;
using RMA.Service.Admin.MasterDataManager.Contracts.Enums;
using RMA.Service.MediCare.Database.Configuration;
using RMA.Service.MediCare.Database.Context;
using RMA.Service.MediCare.Database.Entities;

namespace RMA.Service.MediCare.Database.Context
{

    public partial class EfDbContext : RMA.Common.Database.Repository.RmaDbContext
    {
        static EfDbContext()
        {
            System.Data.Entity.Database.SetInitializer<EfDbContext>(null);
        }

        public EfDbContext()
            : base()
        {
            InitializePartial();
        }

        public EfDbContext(string nameOrConnectionString)
            : base(nameOrConnectionString)
        {
            InitializePartial();
        }

        protected override void Dispose(bool disposing)
        {
            DisposePartial(disposing);
            base.Dispose(disposing);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new medical_AdmissionCodeConfiguration());
            modelBuilder.Configurations.Add(new medical_ChronicMedicalHistoryConfiguration());
            modelBuilder.Configurations.Add(new medical_ChronicMedicationFormConfiguration());
            modelBuilder.Configurations.Add(new medical_ChronicMedicationFormRenewalConfiguration());
            modelBuilder.Configurations.Add(new medical_ChronicMedicationListConfiguration());
            modelBuilder.Configurations.Add(new medical_ChronicMedicationReceiptConfiguration());
            modelBuilder.Configurations.Add(new medical_ChronicNonScriptMedicineConfiguration());
            modelBuilder.Configurations.Add(new medical_ChronicScriptMedicineConfiguration());
            modelBuilder.Configurations.Add(new medical_ChronicScriptMedicineRenewalConfiguration());
            modelBuilder.Configurations.Add(new medical_ClinicalUpdateConfiguration());
            modelBuilder.Configurations.Add(new medical_ClinicalUpdateTreatmentPlanConfiguration());
            modelBuilder.Configurations.Add(new medical_ClinicalUpdateTreatmentProtocolConfiguration());
            modelBuilder.Configurations.Add(new medical_ClinicBookingConfiguration());
            modelBuilder.Configurations.Add(new medical_ClinicBookingTypeConfiguration());
            modelBuilder.Configurations.Add(new medical_ClinicScheduleConfiguration());
            modelBuilder.Configurations.Add(new medical_ClinicVenueConfiguration());
            modelBuilder.Configurations.Add(new medical_HealthCareProviderConfiguration());
            modelBuilder.Configurations.Add(new medical_HealthCareProviderAgreedTariffConfiguration());
            modelBuilder.Configurations.Add(new medical_Icd10CategoryConfiguration());
            modelBuilder.Configurations.Add(new medical_Icd10CodeConfiguration());
            modelBuilder.Configurations.Add(new medical_Icd10DiagnosticGroupConfiguration());
            modelBuilder.Configurations.Add(new medical_Icd10GroupMapConfiguration());
            modelBuilder.Configurations.Add(new medical_Icd10SubCategoryConfiguration());
            modelBuilder.Configurations.Add(new medical_InvoiceConfiguration());
            modelBuilder.Configurations.Add(new medical_InvoiceCompCareMapConfiguration());
            modelBuilder.Configurations.Add(new medical_InvoiceLineConfiguration());
            modelBuilder.Configurations.Add(new medical_InvoiceLineUnderAssessReasonConfiguration());
            modelBuilder.Configurations.Add(new medical_InvoicePreAuthMapConfiguration());
            modelBuilder.Configurations.Add(new medical_InvoiceReportMapConfiguration());
            modelBuilder.Configurations.Add(new medical_InvoiceUnderAssessReasonConfiguration());
            modelBuilder.Configurations.Add(new medical_LevelOfCareConfiguration());
            modelBuilder.Configurations.Add(new medical_MedicalItemConfiguration());
            modelBuilder.Configurations.Add(new medical_MedicalItemTreatmentCodeConfiguration());
            modelBuilder.Configurations.Add(new medical_MedicalItemTypeConfiguration());
            modelBuilder.Configurations.Add(new medical_MiSwitchBatchDeleteReasonConfiguration());
            modelBuilder.Configurations.Add(new medical_MobileClinicBookingTypeConfiguration());
            modelBuilder.Configurations.Add(new medical_ModifierConfiguration());
            modelBuilder.Configurations.Add(new medical_ModifierTariffConfiguration());
            modelBuilder.Configurations.Add(new medical_MutualInclusiveExclusiveCodeConfiguration());
            modelBuilder.Configurations.Add(new medical_PensionerInterviewFormConfiguration());
            modelBuilder.Configurations.Add(new medical_PensionerInterviewFormDetailConfiguration());
            modelBuilder.Configurations.Add(new medical_PmpRegionTransferConfiguration());
            modelBuilder.Configurations.Add(new medical_PractitionerTypeConfiguration());
            modelBuilder.Configurations.Add(new medical_PractitionerTypeIcd10ValidationExclusionConfiguration());
            modelBuilder.Configurations.Add(new medical_PractitionerTypeRCodeMappingConfiguration());
            modelBuilder.Configurations.Add(new medical_PreAuthActivityConfiguration());
            modelBuilder.Configurations.Add(new medical_PreAuthBreakdownUnderAssessReasonConfiguration());
            modelBuilder.Configurations.Add(new medical_PreAuthChronicCmlDetailConfiguration());
            modelBuilder.Configurations.Add(new medical_PreAuthChronicRequestTypeConfiguration());
            modelBuilder.Configurations.Add(new medical_PreAuthCodeLimitConfiguration());
            modelBuilder.Configurations.Add(new medical_PreAuthIcd10CodeConfiguration());
            modelBuilder.Configurations.Add(new medical_PreAuthLevelOfCareConfiguration());
            modelBuilder.Configurations.Add(new medical_PreAuthMotivationForClaimReopeningConfiguration());
            modelBuilder.Configurations.Add(new medical_PreAuthorisationConfiguration());
            modelBuilder.Configurations.Add(new medical_PreAuthorisationBreakdownConfiguration());
            modelBuilder.Configurations.Add(new medical_PreAuthorisationUnderAssessReasonConfiguration());
            modelBuilder.Configurations.Add(new medical_PreAuthPractitionerTypeSettingConfiguration());
            modelBuilder.Configurations.Add(new medical_PreAuthRehabilitationConfiguration());
            modelBuilder.Configurations.Add(new medical_PreAuthRejectReasonConfiguration());
            modelBuilder.Configurations.Add(new medical_PreAuthTreatmentBasketConfiguration());
            modelBuilder.Configurations.Add(new medical_ProstheticItemConfiguration());
            modelBuilder.Configurations.Add(new medical_ProstheticItemCategoryConfiguration());
            modelBuilder.Configurations.Add(new medical_ProsthetistQuoteConfiguration());
            modelBuilder.Configurations.Add(new medical_ProsthetistTypeConfiguration());
            modelBuilder.Configurations.Add(new medical_PublicationConfiguration());
            modelBuilder.Configurations.Add(new medical_QuotationTypeConfiguration());
            modelBuilder.Configurations.Add(new medical_ReductionCodeConfiguration());
            modelBuilder.Configurations.Add(new medical_SectionConfiguration());
            modelBuilder.Configurations.Add(new medical_ServiceConfiguration());
            modelBuilder.Configurations.Add(new medical_ServiceDrgGroupConfiguration());
            modelBuilder.Configurations.Add(new medical_SwitchConfiguration());
            modelBuilder.Configurations.Add(new medical_SwitchBatchConfiguration());
            modelBuilder.Configurations.Add(new medical_SwitchBatchInvoiceConfiguration());
            modelBuilder.Configurations.Add(new medical_SwitchBatchInvoiceLineConfiguration());
            modelBuilder.Configurations.Add(new medical_SwitchBatchInvoiceLineUnderAssessReasonConfiguration());
            modelBuilder.Configurations.Add(new medical_SwitchBatchInvoiceUnderAssessReasonConfiguration());
            modelBuilder.Configurations.Add(new medical_SwitchUnderAssessReasonSettingConfiguration());
            modelBuilder.Configurations.Add(new medical_TariffConfiguration());
            modelBuilder.Configurations.Add(new medical_TariffBaseGazettedUnitCostConfiguration());
            modelBuilder.Configurations.Add(new medical_TariffBaseUnitCostConfiguration());
            modelBuilder.Configurations.Add(new medical_TariffBaseUnitCostTypeConfiguration());
            modelBuilder.Configurations.Add(new medical_TariffTypeConfiguration());
            modelBuilder.Configurations.Add(new medical_TebaInvoiceConfiguration());
            modelBuilder.Configurations.Add(new medical_TebaInvoiceLineConfiguration());
            modelBuilder.Configurations.Add(new medical_TebaTariffConfiguration());
            modelBuilder.Configurations.Add(new medical_TravelAuthorisationConfiguration());
            modelBuilder.Configurations.Add(new medical_TreatmentBasketConfiguration());
            modelBuilder.Configurations.Add(new medical_TreatmentBasketInjuryConfiguration());
            modelBuilder.Configurations.Add(new medical_TreatmentBasketMedicalItemConfiguration());
            modelBuilder.Configurations.Add(new medical_TreatmentCodeConfiguration());
            modelBuilder.Configurations.Add(new medical_TreatmentPlanConfiguration());
            modelBuilder.Configurations.Add(new medical_TreatmentProtocolConfiguration());
            modelBuilder.Configurations.Add(new medical_WorkflowConfiguration());

            OnModelCreatingPartial(modelBuilder);
        }

        partial void InitializePartial();
        partial void DisposePartial(bool disposing);
        partial void OnModelCreatingPartial(System.Data.Entity.DbModelBuilder modelBuilder);
    }
}
