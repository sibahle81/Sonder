//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//		
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using RMA.Common.Database.Contracts.Repository;
using RMA.Service.Admin.MasterDataManager.Contracts.Enums;

namespace RMA.Service.MediCare.Database.Entities
{
    public partial class medical_PreAuthorisationBreakdown : IAuditableEntity, ISoftDeleteEntity
    {
        public int PreAuthBreakdownId { get; set; } // PreAuthBreakdownId (Primary key)
        public int PreAuthId { get; set; } // PreAuthId
        public int? MedicalItemId { get; set; } // MedicalItemId
        public int? TariffId { get; set; } // TariffId
        public int? TreatmentCodeId { get; set; } // TreatmentCodeId
        public System.DateTime DateAuthorisedFrom { get; set; } // DateAuthorisedFrom
        public System.DateTime DateAuthorisedTo { get; set; } // DateAuthorisedTo
        public decimal RequestedTreatments { get; set; } // RequestedTreatments
        public decimal? AuthorisedTreatments { get; set; } // AuthorisedTreatments
        public decimal RequestedAmount { get; set; } // RequestedAmount
        public decimal? AuthorisedAmount { get; set; } // AuthorisedAmount
        public bool? IsAuthorised { get; set; } // IsAuthorised
        public string AuthorisedReason { get; set; } // AuthorisedReason (length: 1000)
        public bool? IsRejected { get; set; } // IsRejected
        public string RejectedReason { get; set; } // RejectedReason (length: 1000)
        public string ReviewComments { get; set; } // ReviewComments (length: 1000)
        public int? SolId { get; set; } // SOLId
        public decimal? TariffAmount { get; set; } // TariffAmount
        public bool? IsClinicalUpdate { get; set; } // IsClinicalUpdate
        public bool IsDeleted { get; set; } // IsDeleted
        public string CreatedBy { get; set; } // CreatedBy (length: 50)
        public System.DateTime CreatedDate { get; set; } // CreatedDate
        public string ModifiedBy { get; set; } // ModifiedBy (length: 50)
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate
        public short? UpdateSequenceNo { get; set; } // UpdateSequenceNo
        public int? ClinicalUpdateId { get; set; } // ClinicalUpdateId

        // Reverse navigation

        /// <summary>
        /// Child medical_PreAuthBreakdownUnderAssessReasons where [PreAuthBreakdownUnderAssessReason].[PreAuthBreakdownId] point to this entity (FK_medical_PreAuthBreakdownUnderAssessReason_PreAuthorisationBreakdown)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<medical_PreAuthBreakdownUnderAssessReason> PreAuthBreakdownUnderAssessReasons { get; set; } // PreAuthBreakdownUnderAssessReason.FK_medical_PreAuthBreakdownUnderAssessReason_PreAuthorisationBreakdown
        /// <summary>
        /// Child medical_PreAuthLevelOfCares where [PreAuthLevelOfCare].[PreAuthBreakdownId] point to this entity (FK_PreAuthLevelOfCare_PreAuthorisationBreakdown)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<medical_PreAuthLevelOfCare> PreAuthLevelOfCares { get; set; } // PreAuthLevelOfCare.FK_PreAuthLevelOfCare_PreAuthorisationBreakdown

        // Foreign keys

        /// <summary>
        /// Parent medical_ClinicalUpdate pointed by [PreAuthorisationBreakdown].([ClinicalUpdateId]) (FK_PreAuthorisationBreakdown_ClinicalUpdate)
        /// </summary>
        public virtual medical_ClinicalUpdate ClinicalUpdate { get; set; } // FK_PreAuthorisationBreakdown_ClinicalUpdate

        /// <summary>
        /// Parent medical_PreAuthorisation pointed by [PreAuthorisationBreakdown].([PreAuthId]) (FK_PreAuthorisationBreakdown_PreAuthorisation)
        /// </summary>
        public virtual medical_PreAuthorisation PreAuthorisation { get; set; } // FK_PreAuthorisationBreakdown_PreAuthorisation

        public medical_PreAuthorisationBreakdown()
        {
            PreAuthBreakdownUnderAssessReasons = new System.Collections.Generic.List<medical_PreAuthBreakdownUnderAssessReason>();
            PreAuthLevelOfCares = new System.Collections.Generic.List<medical_PreAuthLevelOfCare>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
