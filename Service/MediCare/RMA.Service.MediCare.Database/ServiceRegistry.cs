


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//		
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// The following connection settings were used to generate this file:
//     Connection String:      "data source=azt-mcc-sql-01.rma.msft;initial catalog=AZD-MCC;user id=RMAAdmin;password=**zapped**;;MultipleActiveResultSets=True;App=EntityFramework"
// ------------------------------------------------------------------------------------------------
// Database Edition        : Developer Edition (64-bit)
// Database Engine Edition : Enterprise
// Database Version        : 14.0.3471.2

using Autofac;
using RMA.Common.Database.Repository;
using RMA.Common.Database.Contracts.Repository;
using RMA.Service.MediCare.Database.Entities;
using RMA.Service.MediCare.Database.Context;

namespace RMA.Service.MediCare.Database
{
	public class EfDbContextServiceRegistry : Module
	{
		protected override void Load(ContainerBuilder builder)
		{ 
			builder.RegisterType<EfDbContext>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_AdmissionCode, EfDbContext>>().As<IRepository<medical_AdmissionCode>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_ChronicMedicalHistory, EfDbContext>>().As<IRepository<medical_ChronicMedicalHistory>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_ChronicMedicationForm, EfDbContext>>().As<IRepository<medical_ChronicMedicationForm>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_ChronicMedicationFormRenewal, EfDbContext>>().As<IRepository<medical_ChronicMedicationFormRenewal>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_ChronicMedicationList, EfDbContext>>().As<IRepository<medical_ChronicMedicationList>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_ChronicMedicationReceipt, EfDbContext>>().As<IRepository<medical_ChronicMedicationReceipt>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_ChronicNonScriptMedicine, EfDbContext>>().As<IRepository<medical_ChronicNonScriptMedicine>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_ChronicScriptMedicine, EfDbContext>>().As<IRepository<medical_ChronicScriptMedicine>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_ChronicScriptMedicineRenewal, EfDbContext>>().As<IRepository<medical_ChronicScriptMedicineRenewal>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_ClinicalUpdate, EfDbContext>>().As<IRepository<medical_ClinicalUpdate>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_ClinicalUpdateTreatmentPlan, EfDbContext>>().As<IRepository<medical_ClinicalUpdateTreatmentPlan>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_ClinicalUpdateTreatmentProtocol, EfDbContext>>().As<IRepository<medical_ClinicalUpdateTreatmentProtocol>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_ClinicBooking, EfDbContext>>().As<IRepository<medical_ClinicBooking>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_ClinicBookingType, EfDbContext>>().As<IRepository<medical_ClinicBookingType>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_ClinicSchedule, EfDbContext>>().As<IRepository<medical_ClinicSchedule>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_ClinicVenue, EfDbContext>>().As<IRepository<medical_ClinicVenue>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_HealthCareProvider, EfDbContext>>().As<IRepository<medical_HealthCareProvider>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_HealthCareProviderAgreedTariff, EfDbContext>>().As<IRepository<medical_HealthCareProviderAgreedTariff>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_Icd10Category, EfDbContext>>().As<IRepository<medical_Icd10Category>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_Icd10Code, EfDbContext>>().As<IRepository<medical_Icd10Code>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_Icd10DiagnosticGroup, EfDbContext>>().As<IRepository<medical_Icd10DiagnosticGroup>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_Icd10GroupMap, EfDbContext>>().As<IRepository<medical_Icd10GroupMap>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_Icd10SubCategory, EfDbContext>>().As<IRepository<medical_Icd10SubCategory>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_Invoice, EfDbContext>>().As<IRepository<medical_Invoice>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_InvoiceCompCareMap, EfDbContext>>().As<IRepository<medical_InvoiceCompCareMap>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_InvoiceLine, EfDbContext>>().As<IRepository<medical_InvoiceLine>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_InvoiceLineUnderAssessReason, EfDbContext>>().As<IRepository<medical_InvoiceLineUnderAssessReason>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_InvoicePreAuthMap, EfDbContext>>().As<IRepository<medical_InvoicePreAuthMap>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_InvoiceReportMap, EfDbContext>>().As<IRepository<medical_InvoiceReportMap>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_InvoiceUnderAssessReason, EfDbContext>>().As<IRepository<medical_InvoiceUnderAssessReason>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_LevelOfCare, EfDbContext>>().As<IRepository<medical_LevelOfCare>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_MedicalItem, EfDbContext>>().As<IRepository<medical_MedicalItem>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_MedicalItemTreatmentCode, EfDbContext>>().As<IRepository<medical_MedicalItemTreatmentCode>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_MedicalItemType, EfDbContext>>().As<IRepository<medical_MedicalItemType>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_MiSwitchBatchDeleteReason, EfDbContext>>().As<IRepository<medical_MiSwitchBatchDeleteReason>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_MobileClinicBookingType, EfDbContext>>().As<IRepository<medical_MobileClinicBookingType>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_Modifier, EfDbContext>>().As<IRepository<medical_Modifier>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_ModifierTariff, EfDbContext>>().As<IRepository<medical_ModifierTariff>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_MutualInclusiveExclusiveCode, EfDbContext>>().As<IRepository<medical_MutualInclusiveExclusiveCode>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_PensionerInterviewForm, EfDbContext>>().As<IRepository<medical_PensionerInterviewForm>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_PensionerInterviewFormDetail, EfDbContext>>().As<IRepository<medical_PensionerInterviewFormDetail>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_PmpRegionTransfer, EfDbContext>>().As<IRepository<medical_PmpRegionTransfer>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_PractitionerType, EfDbContext>>().As<IRepository<medical_PractitionerType>>();
			builder.RegisterType<EfRepository<medical_PractitionerTypeIcd10ValidationExclusion, EfDbContext>>().As<IRepository<medical_PractitionerTypeIcd10ValidationExclusion>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_PractitionerTypeRCodeMapping, EfDbContext>>().As<IRepository<medical_PractitionerTypeRCodeMapping>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_PreAuthActivity, EfDbContext>>().As<IRepository<medical_PreAuthActivity>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_PreAuthBreakdownUnderAssessReason, EfDbContext>>().As<IRepository<medical_PreAuthBreakdownUnderAssessReason>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_PreAuthChronicCmlDetail, EfDbContext>>().As<IRepository<medical_PreAuthChronicCmlDetail>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_PreAuthChronicRequestType, EfDbContext>>().As<IRepository<medical_PreAuthChronicRequestType>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_PreAuthCodeLimit, EfDbContext>>().As<IRepository<medical_PreAuthCodeLimit>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_PreAuthIcd10Code, EfDbContext>>().As<IRepository<medical_PreAuthIcd10Code>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_PreAuthLevelOfCare, EfDbContext>>().As<IRepository<medical_PreAuthLevelOfCare>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_PreAuthMotivationForClaimReopening, EfDbContext>>().As<IRepository<medical_PreAuthMotivationForClaimReopening>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_PreAuthorisation, EfDbContext>>().As<IRepository<medical_PreAuthorisation>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_PreAuthorisationBreakdown, EfDbContext>>().As<IRepository<medical_PreAuthorisationBreakdown>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_PreAuthorisationUnderAssessReason, EfDbContext>>().As<IRepository<medical_PreAuthorisationUnderAssessReason>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_PreAuthPractitionerTypeSetting, EfDbContext>>().As<IRepository<medical_PreAuthPractitionerTypeSetting>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_PreAuthRehabilitation, EfDbContext>>().As<IRepository<medical_PreAuthRehabilitation>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_PreAuthRejectReason, EfDbContext>>().As<IRepository<medical_PreAuthRejectReason>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_PreAuthTreatmentBasket, EfDbContext>>().As<IRepository<medical_PreAuthTreatmentBasket>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_ProstheticItem, EfDbContext>>().As<IRepository<medical_ProstheticItem>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_ProstheticItemCategory, EfDbContext>>().As<IRepository<medical_ProstheticItemCategory>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_ProsthetistQuote, EfDbContext>>().As<IRepository<medical_ProsthetistQuote>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_ProsthetistType, EfDbContext>>().As<IRepository<medical_ProsthetistType>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_Publication, EfDbContext>>().As<IRepository<medical_Publication>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_QuotationType, EfDbContext>>().As<IRepository<medical_QuotationType>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_ReductionCode, EfDbContext>>().As<IRepository<medical_ReductionCode>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_Section, EfDbContext>>().As<IRepository<medical_Section>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_Service, EfDbContext>>().As<IRepository<medical_Service>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_ServiceDrgGroup, EfDbContext>>().As<IRepository<medical_ServiceDrgGroup>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_Switch, EfDbContext>>().As<IRepository<medical_Switch>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_SwitchBatch, EfDbContext>>().As<IRepository<medical_SwitchBatch>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_SwitchBatchInvoice, EfDbContext>>().As<IRepository<medical_SwitchBatchInvoice>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_SwitchBatchInvoiceLine, EfDbContext>>().As<IRepository<medical_SwitchBatchInvoiceLine>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_SwitchBatchInvoiceLineUnderAssessReason, EfDbContext>>().As<IRepository<medical_SwitchBatchInvoiceLineUnderAssessReason>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_SwitchBatchInvoiceUnderAssessReason, EfDbContext>>().As<IRepository<medical_SwitchBatchInvoiceUnderAssessReason>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_SwitchUnderAssessReasonSetting, EfDbContext>>().As<IRepository<medical_SwitchUnderAssessReasonSetting>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_Tariff, EfDbContext>>().As<IRepository<medical_Tariff>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_TariffBaseGazettedUnitCost, EfDbContext>>().As<IRepository<medical_TariffBaseGazettedUnitCost>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_TariffBaseUnitCost, EfDbContext>>().As<IRepository<medical_TariffBaseUnitCost>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_TariffBaseUnitCostType, EfDbContext>>().As<IRepository<medical_TariffBaseUnitCostType>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_TariffType, EfDbContext>>().As<IRepository<medical_TariffType>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_TebaInvoice, EfDbContext>>().As<IRepository<medical_TebaInvoice>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_TebaInvoiceLine, EfDbContext>>().As<IRepository<medical_TebaInvoiceLine>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_TebaTariff, EfDbContext>>().As<IRepository<medical_TebaTariff>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_TravelAuthorisation, EfDbContext>>().As<IRepository<medical_TravelAuthorisation>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_TreatmentBasket, EfDbContext>>().As<IRepository<medical_TreatmentBasket>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_TreatmentBasketInjury, EfDbContext>>().As<IRepository<medical_TreatmentBasketInjury>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_TreatmentBasketMedicalItem, EfDbContext>>().As<IRepository<medical_TreatmentBasketMedicalItem>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_TreatmentCode, EfDbContext>>().As<IRepository<medical_TreatmentCode>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_TreatmentPlan, EfDbContext>>().As<IRepository<medical_TreatmentPlan>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<medical_TreatmentProtocol, EfDbContext>>().As<IRepository<medical_TreatmentProtocol>>();
			builder.RegisterType<EfRepository<medical_Workflow, EfDbContext>>().As<IRepository<medical_Workflow>>();
  
		}
	}
}
