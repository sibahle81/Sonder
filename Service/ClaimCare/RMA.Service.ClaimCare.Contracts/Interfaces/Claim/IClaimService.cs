using Microsoft.ServiceFabric.Services.Remoting;

using RMA.Common.Entities;
using RMA.Common.Entities.DatabaseQuery;
using RMA.Service.Admin.CampaignManager.Contracts.Entities;
using RMA.Service.Admin.MasterDataManager.Contracts.Entities;
using RMA.Service.Admin.MasterDataManager.Contracts.Enums;
using RMA.Service.Admin.SecurityManager.Contracts.Entities;
using RMA.Service.ClaimCare.Contracts.Entities;
using RMA.Service.ClaimCare.Contracts.Enums;
using RMA.Service.ClientCare.Contracts.Entities.Policy;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

using Action = RMA.Service.ClaimCare.Contracts.Entities.Action;
using WorkPool = RMA.Service.ClaimCare.Contracts.Entities.WorkPool;

namespace RMA.Service.ClaimCare.Contracts.Interfaces.Claim
{
    public interface IClaimService : IService
    {
        Task<Entities.Claim> GetClaim(int claimId);
        Task<Entities.Claim> GetClaimDetails(int policyId, int personEventId);
        Task<List<Entities.Claim>> GetClaimsByPolicyIds(List<int> policyIds);
        Task<List<Entities.Claim>> GetClaimsByPolicyId(int policyId);
        Task<DocumentSetEnum> GetDocumentSetName(DeathTypeEnum deathType, bool isIndividual);
        Task<Entities.Claim> GetClaimDetailsById(int claimId);
        Task<PolicyClaim> GetSlaClaims(CoverTypeModel coverTypes);
        Task<List<WorkPoolsModel>> GetWorkPoolsForUser(int userId);
        Task<List<WorkPoolsModel>> GetUsersToReAllocate(int userId);
        Task<List<WorkPool>> GetClaimsForWorkPool(WorkPoolEnum workPool);
        Task<TracerModel> GetTracerInformation(int claimId);
        Task<List<ClaimTracerInvoice>> GetTracerInvoices(int claimId);
        Task<List<ClaimInvoice>> GetClaimInvoiceDetailsForDecline(int claimId);
        Task<ClaimInvoice> GetClaimInvoiceForAuthorization(int claimId);
        Task<List<Contracts.Entities.WorkPool>> GetClaimsForLoggedInUser();
        Task<int?> GetLastUserForWorkPool(int claimId, WorkPoolEnum workPool);
        Task<List<ClaimCancelReason>> GetClaimCancellationReasons();
        Task<List<ClaimReOpenReason>> GetClaimReOpenReasons();
        Task<List<SearchResult>> Search(PagedRequest request, bool showActive);
        Task<ClaimInvoice> GetClaimInvoiceAllocationByPaymentId(int invoiceAllocationId);
        Task<List<CauseOfDeathType>> GetCauseOfDeathType(DeathTypeEnum deathType);
        Task<PersonEvent> GetPersonEventByClaimId(int claimId);
        Task<Contracts.Entities.Claim> GetClaimByClaimReference(string claimReference);
        Task<Contracts.Entities.Claim> GetClaimsByIdNumber(string claimReference, DateTime eventDate, string surName);
        Task<Contracts.Entities.Claim> GetClaimByEventId(List<int> eventIds, DateTime eventDate);
        Task<Contracts.Entities.Claim> GetClaimByPersonEventId(List<int> personEventIds, DateTime eventDate);
        Task<Contracts.Entities.Claim> GetClaimsByMemberNumber(string claimReferenceNumber, DateTime eventDate);
        Task<PersonEvent> GetDeceasedInfo(int policyId, int insuredLifeId, int wizardId);
        Task<List<Contracts.Entities.Claim>> GetClaimsByPersonEventId(int personEventId);
        Task<Beneficiary> GetBeneficiaryAndBankAccountById(int beneficiaryId, int bankId);
        Task<List<WorkPoolsModel>> GetUsersToAllocate(int userId, string lastWorkedOnUsers, string claimId, string personEventId);
        Task<List<ClaimRecovery>> GetAssessorRecoveries(string recoveryInvokedBy);
        Task<ClaimRecoveryView> GetRecoveryViewDetails(int recoveryId);
        Task<List<ClaimRecovery>> GetLegalRecoveries(int workPoolId);
        Task<List<Contracts.Entities.Beneficiary>> GetBeneficiaryAndBankingDetail(int claimId);
        Task<List<ClientCare.Contracts.Entities.RolePlayer.CorporateResult>> GetCorporateRoles(CoverTypeModel coverTypeModel);
        Task<Entities.PolicyClaim> GetClaimsByCoverTypeIds(CoverTypeModel coverTypeModel);
        Task<Contracts.Entities.PolicyClaim> GetCorporateClaims(CoverTypeModel coverTypeModel);
        Task<Entities.PolicyClaim> GetClaimsByProductOptionId(int productOptionId);
        Task<AssessorClaims> GetClaimsAssessors();
        Task<User> GetClaimAssessor(int assessorId);
        Task<List<FuneralClaimSearchResult>> GetClaimReport(string dateFrom, string dateTo, int statusId);
        Task<List<WorkPoolsModel>> GetUsersForWorkPool(WorkPoolEnum workPool, string roleName, int userId);
        Task<Contracts.Entities.ClaimInvoice> GetClaimInvoice(int claimId, int beneficiaryId, int bankAccountId);
        Task<Contracts.Entities.ClaimInvoice> GetClaimInvoiceAndAllocationsByClaimId(int claimId);
        Task<PagedRequestResult<WorkPool>> GetClaimWorkPoolsPaged(WorkPoolEnum workPool, int userId, int selectedUserId, PagedRequest pagedRequest);
        Task<List<WorkPool>> GetActiveClaimsAssignedToUser(int userId);
        Task<ManageClaim> GetManageClaimDetailsById(int claimId);
        Task<ClaimsCalculatedAmount> GetCalculatedAmounts(int claimId);
        Task<List<ParentInsuranceType>> GetInsuranceTypesByEventTypeId(int eventTypeId);
        Task<List<DiseaseType>> GetTypeOfDiseasesByInsuranceTypeId(int insuranceTypeId);
        Task<List<EventCause>> GetCausesOfDisease(int diseaseTypeId);
        Task<List<ParentInsuranceType>> GetInsuranceTypes();
        Task<PagedRequestResult<Entities.Claim>> GetPagedClaimsByPolicyId(PagedRequest request);
        Task<PagedRequestResult<Entities.Claim>> GetPersonClaimsByIdNumber(PagedRequest request);
        Task<PagedRequestResult<Entities.Claim>> GetClaimantAcknowledgedAndLiabilityAcceptedClaims(PagedRequest request);

        // Updates 
        Task UpdateStatus(Action action);
        Task UpdateTracerInvoicePaymentStatus(int paymentID, PaymentStatusEnum paymentStatus);
        Task UpdateTracingFee(int claimId, decimal paymentAmount);
        Task<int> UpdateClaim(Entities.Claim claim);
        Task UpdateClaimStatus(Action action);
        Task ProcessPaymentSuccess(int paymentId, int claimInvoiceId, ClaimTypeEnum? claimTypeId);
        Task AuthorizedPayment(List<ClaimInvoice> claimInvoices);
        Task<int> UpdateClaimIsRuleOverridden(int claimId);
        Task ProcessPayeeDetailRejection(int claimId, string reason);
        Task<PersonEvent> DuplicateClaimCheck(PersonEvent personEvent);
        Task ProcessPayoutAmountRejection(int claimId, string reason);
        Task<ValidationResult> ProcessClaimPayment(List<ClaimInvoice> claimPayment);
        Task<bool> UpdateClaimInvoice(Contracts.Entities.ClaimInvoice claimInvoice);
        Task UpdateClaimWithWorkPool(int claimId, int personEventId, WorkPoolEnum workPool, int wizardId, int claimStatusId, int? userId);
        Task ReAllocateEventToAssessor(int eventReference, string eventCreatedBy, int wizardId, string userName, WorkPoolEnum workPool, int claimStatusId, int? userId);
        Task ProcessBankingDetailRejectionAsync(int claimId, string reason, ClaimTypeEnum? claimTypeEnum);
        Task ScheduledNotificationForOverDueSLA();
        Task<int> Create(Entities.Claim claim);
        Task<int> AddClaimRuleAudit(List<ClaimRuleAudit> claimRuleAudit);
        Task GenerateClaims(List<PersonEvent> newPersonEvents);
        Task<int> AddManageUser(ManageUser manageUser);
        Task<bool> SendDeclineLetterToClaimant(PersonEvent personEvent);
        Task<bool> CheckIfStillbornBenefitExists(int policyId);
        Task<int> CreateClaimInvoice(Contracts.Entities.ClaimInvoice claimInvoice);
        Task GeneratePersonEventClaims(List<PersonEvent> personEvents);
        Task<ClaimPayment> GetClaimPaymentForAuthorisation(int claimId);
        Task<WorkPool> GetClaimAndEventByClaimId(int claimId);
        Task<int> AddClaimNote(ClaimNote note);
        Task<bool> RequestAdditionalDocuments(AdditionalDocument additionalDocument);
        Task<bool> RequestOutstandingDocuments(AdditionalDocument additionalDocument);
        Task<ValidationResult> SendRecoveryEmail(List<ClaimInvoice> claimInvoices);
        Task<List<ClaimReOpenReason>> GetClaimRepayReasons();
        Task<List<ClaimReOpenReason>> GetClaimCloseReasons();
        Task<WorkPool> GetPersonEventByPersonEventId(int personEventId);
        Task UpdatePersonEventStatus(PersonEventAction action);
        Task ApproveRejectEvent(Contracts.Entities.Event eventEntity);
        Task ClaimActionEmailNotification(ClaimEmailAction action);
        Task<List<EmailAudit>> GetClaimNotificationAudit(string itemType, int itemId);
        Task SendFollowUpEmail();
        Task<List<Entities.Claim>> GetClaimByPolicy(int policyId);
        Task<PagedRequestResult<SmsAudit>> GetClaimSmsAudit(PagedRequest request);
        Task<RMA.Common.Entities.MailAttachment[]> GetDocumentsToDownload(int documentTypeId);
        Task UpdatePolicyInsuredLife(Item item);
        Task<FuneralInvoice> GetFuneralInvoice(int claimInvoiceId);
        Task<List<ClaimNote>> GetNotesByInsuredLife(int insuredLifeId);
        Task<bool> BankAccountVerification(string accountNumber, BankAccountTypeEnum accountType, string branchCode, string accountHolderName, string initials, string accountHolderIdNumber);
        Task<ClaimBankAccountVerification> GetBankAccountVerificationDetails(string accountNumber, BankAccountTypeEnum bankAccountType, string branchCode);
        Task ClaimRecovery(int claimId);
        Task CreateClaimRecovery(ClaimRecovery claimRecovery);
        Task<bool> ReferClaimToLegal(int claimRecoveryId);
        Task ReferRecoveryStatus(ClaimStatusEnum claimStatus, int claimRecoveryId);
        Task CreateClaimsTracer(ClaimsTracing claimsTracing);
        Task<bool> AuthorizeTracerPayment(ClaimTracerInvoice claimTracerInvoice);
        Task<bool> SendForInvestigation(int personEventId);
        Task<bool> UpdateInvestigationWorkFlow(int personEventId);
        Task<ClaimTracerInvoice> GetUnclaimedBenefitValues(int claimId);
        Task<ClaimsCalculatedAmount> GetClaimsCalculatedAmountByClaimId(int claimId);
        Task<RMA.Common.Entities.MailAttachment> DownloadAdditionalDocumentEmailTemplate(AdditionalDocument additionalDocument);
        Task<bool> IsUnclaimedBenefit(int claimId);
        Task<List<User>> GetClaimManagers();
        Task<List<string>> GetChannelsForClaims(string channelName);
        Task<List<string>> GetSchemesForClaims(string schemeNames);
        Task<List<string>> GetBrokersByProducstLinkedToClaims(string productNames);
        Task<List<string>> GetSchemesByBrokeragesLinkedToClaims(string brokerageNames);
        Task CreateInvoiceAllocations(List<InvoiceAllocation> invoiceAllocations, int claimInvoiceId);
        Task<bool> ProcessVOPDReponse(int roleplayerId);
        Task<List<Contracts.Entities.Claim>> GetClaimsByClaimReferenceNumber(string claimReferenceNumber);
        Task<RMA.Common.Entities.MailAttachment[]> GetDocumentTypeTemplateForPersonEvent(DocumentTypeEnum docTypeId, int personEventId);
        Task<List<Lookup>> GetClaimStatuses();
        Task ProcessBeneficiaryVOPDResponse(int rolePlayerId);
        Task<Contracts.Entities.Claim> GetClaimByCompCarePersonEventId(int personEventId);
        Task<List<Contracts.Entities.Claim>> GetPersonEventClaims(int personEventId);
        Task<DiseaseType> GetDiseasesByDiseaseypeId(int diseaseTypeId);
        Task<bool> SendAdditionalDocumentsRequest(AdditionalDocumentRequest additionalDocumentRequest);
        Task<PagedRequestResult<ClaimNote>> GetPagedClaimNotes(PagedRequest pagedRequest);
        Task EditClaimNote(ClaimNote claimNote);
        Task<PagedRequestResult<Entities.Claim>> GetPagedClaimsAssignedToUser(PagedRequest pagedRequest);
        Task UpdatePersonEventWorkPoolFlow(int personEventId, WorkPoolEnum workPool, int claimStatusId, int userId);
        Task<List<ClientCare.Contracts.Entities.Product.Benefit>> GetClaimBenefits(int claimId);
        Task<bool> CheckClaimMedicalBenefits(int claimId);
        Task<Contracts.Entities.PersonEvent> NotificationToTeamLeader(int personEventId);
        Task<Contracts.Entities.PersonEvent> NotificationOfLiabilityAcceptance(int personEventId);
        Task<Contracts.Entities.PersonEvent> NotificationOfZeroPercentClosure(int personEventId);
        Task<bool> SendCommunication(int claimId, int emailTemplateId);
        Task<bool> RequestDocumentsfromHCP(int claimId, int healthcareProviderId, int emailTemplateId);
        Task<List<SundryServiceProvider>> GetSundryServiceProvidersByType(SundryServiceProviderTypeEnum sundryServiceProviderType);
        Task<List<SundryServiceProvider>> GetSundryProviders(string request);
        Task<List<ReferralTypeLimitConfiguration>> GetAuthorisationLimitsByReferralTypeLimitGroup(ClaimReferralTypeLimitGroupEnum claimReferralTypeLimitGroup);
        Task<bool> ConfirmEstimates(PersonEvent personEvent);
        Task<int> DeleteClaim(Note claimNote);
        Task<ClaimStatusEnum> VerifyMVAClaim(PersonEvent personEvent, ClaimStatusEnum claimStatus);
        Task<ValidationResult> SubmitInvoicePayment(ClaimInvoice claimInvoice);
        Task SubmitMultipleInvoicePayments(List<ClaimInvoice> claimInvoices);
        Task<bool> RecallPayment(ClaimInvoice claimInvoice);
        Task<int> GetICD10PDPercentageEstimates(List<ICD10EstimateFilter> icd10EstimateFilter, InjurySeverityTypeEnum injurySeverityType);
        Task<bool> SendClaimToPensions(Contracts.Entities.Claim claim);
        Task<int> UpdateClaimPD(Contracts.Entities.Claim claim);
        Task<int> GenerateClaimEstimates(List<ICD10EstimateFilter> icd10EstimateFilter, InjurySeverityTypeEnum injurySeverityType, IndustryClassEnum industryClass, int personEventId);
        Task<List<int>> AddNewClaimsBenefitAmounts(List<ClaimsBenefitsAmount> claimsBenefitsAmount);
        Task<List<ClaimsBenefitsAmount>> GetClaimsBenefitAmounts(bool activeBenefitsAmounts);
        Task<int> AddClaimAdditionalRequiredDocument(List<ClaimAdditionalRequiredDocument> additionalDoc);
        Task<List<ClaimAdditionalRequiredDocument>> GetClaimAdditionalRequiredDocument(int personeventId);
        Task<decimal> GetEstimatedEarning(IndustryClassEnum industryClass, int personEventId);
        Task<List<ReferralTypeLimitConfiguration>> GetReferralTypeLimitConfiguration();
        Task<int> SaveReferralTypeLimitConfiguration(ReferralTypeLimitConfiguration data);
        Task<int> UpdateClaimsBenefitAmounts(ClaimsBenefitsAmount claimsBenefitsAmounts);
        Task<bool> UpdatePersonEventQuestionnaire(PersonEventQuestionnaire personEventQuestionnaire);
        Task<List<ClaimReferralQueryType>> GetClaimsReferralQueryType();
        Task<int> AddClaimReferralDetail(ClaimReferralDetail claimReferralDetail);
        Task<List<ClaimReferralDetail>> GetClaimReferralDetail(int claimId);
        Task<ClaimReferralQueryType> GetClaimReferralQueryType(int referralQueryTypeId);
        Task<User> RoundRobinByUserPermission(List<string> permissions);
        Task<int> RejectClaimInvoicePayment(Note claimNote);
        Task<bool> GetDocumentReceived(string keyName, string keyValue, DocumentTypeEnum documentTypeId);
        Task<bool> UpdateClaimRequiredDocument(int personEventId, DocumentTypeEnum documentTypeId);
        Task<List<PersonEvent>> GetPersonEventByCompCarePevRefNumber(string claimReferenceNumber);
        Task<Contracts.Entities.Claim> GetClaimByPersonEvent(int personEventId);
        Task AddMedicalInvoiceSTPExitReason(int claimId);
        Task ProcessPaymentRejection(int claimId, int claimInvoiceId, string reason, ClaimTypeEnum? claimTypeEnum);
        Task<ValidationResult> CheckBankingDetailsInvoicePayment(ClaimInvoice claimInvoice);
        Task NotifyPersonEventOwnerOrDefaultRole(int personEventId, string message, string defaultRoleName);
        Task<PersonEvent> AcknowledgeClaims(List<Policy> policies, int personEventId, bool isAutoAcknowledge);
        Task<PersonEvent> UnacknowledgeClaims(List<Policy> policies, int personEventId);
        Task<PersonEvent> AcknowledgeVapsClaims(int personEventId);
        Task<ClaimInvoice> GetClaimInvoiceById(int claimInvoiceId);
        Task SendMMIHcpReminder();
        Task<PagedRequestResult<Entities.ClaimSearchResult>> GetPagedClaims(PagedRequest request);

        Task ReconcilePolicyAndClaimBenefit(int claimId);
    }
}