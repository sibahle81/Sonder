//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//		
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using RMA.Common.Database.Contracts.Repository;
using RMA.Service.Admin.MasterDataManager.Contracts.Enums;
using RMA.Service.ClaimCare.Database.Entities;

namespace RMA.Service.ClaimCare.Database.Configuration
{
    public class claim_PersonEventConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<claim_PersonEvent>
    {
        public claim_PersonEventConfiguration()
            : this("claim")
        {
        }

        public claim_PersonEventConfiguration(string schema)
        {
            ToTable("PersonEvent", schema);
            HasKey(x => x.PersonEventId);

            Property(x => x.PersonEventId).HasColumnName(@"PersonEventId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClaimType).HasColumnName(@"ClaimTypeId").HasColumnType("int").IsOptional();
            Property(x => x.PersonEmploymentId).HasColumnName(@"PersonEmploymentId").HasColumnType("int").IsOptional();
            Property(x => x.CompanyRolePlayerId).HasColumnName(@"CompanyRolePlayerId").HasColumnType("int").IsOptional();
            Property(x => x.PersonEventReferenceNumber).HasColumnName(@"PersonEventReferenceNumber").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.SendBrokerEmail).HasColumnName(@"SendBrokerEmail").HasColumnType("bit").IsOptional();
            Property(x => x.EventId).HasColumnName(@"EventId").HasColumnType("int").IsRequired();
            Property(x => x.InsuredLifeId).HasColumnName(@"InsuredLifeId").HasColumnType("int").IsRequired();
            Property(x => x.ClaimantId).HasColumnName(@"ClaimantId").HasColumnType("int").IsRequired();
            Property(x => x.InformantId).HasColumnName(@"InformantId").HasColumnType("int").IsOptional();
            Property(x => x.PersonEventStatus).HasColumnName(@"PersonEventStatusId").HasColumnType("int").IsRequired();
            Property(x => x.PersonEventBucketClassId).HasColumnName(@"PersonEventBucketClassId").HasColumnType("int").IsOptional();
            Property(x => x.DateReceived).HasColumnName(@"DateReceived").HasColumnType("datetime").IsRequired();
            Property(x => x.DateCaptured).HasColumnName(@"DateCaptured").HasColumnType("datetime").IsRequired();
            Property(x => x.CapturedByUserId).HasColumnName(@"CapturedByUserId").HasColumnType("int").IsRequired();
            Property(x => x.AssignedDate).HasColumnName(@"AssignedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.AssignedToUserId).HasColumnName(@"AssignedToUserID").HasColumnType("int").IsOptional();
            Property(x => x.DateSubmitted).HasColumnName(@"DateSubmitted").HasColumnType("datetime").IsOptional();
            Property(x => x.SubmittedByUserId).HasColumnName(@"SubmittedByUserId").HasColumnType("int").IsOptional();
            Property(x => x.DateAuthorised).HasColumnName(@"DateAuthorised").HasColumnType("datetime").IsOptional();
            Property(x => x.AuthorisedByUserId).HasColumnName(@"AuthorisedByUserId").HasColumnType("int").IsOptional();
            Property(x => x.DateRejected).HasColumnName(@"DateRejected").HasColumnType("datetime").IsOptional();
            Property(x => x.RejectedByUserId).HasColumnName(@"RejectedByUserId").HasColumnType("int").IsOptional();
            Property(x => x.RejectionReason).HasColumnName(@"RejectionReason").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.InsuranceTypeId).HasColumnName(@"InsuranceTypeId").HasColumnType("int").IsOptional();
            Property(x => x.SuspiciousTransactionStatus).HasColumnName(@"SuspiciousTransactionStatusId").HasColumnType("int").IsRequired();
            Property(x => x.IsSpectacles).HasColumnName(@"IsSpectacles").HasColumnType("bit").IsRequired();
            Property(x => x.IsDentures).HasColumnName(@"IsDentures").HasColumnType("bit").IsRequired();
            Property(x => x.IsAssault).HasColumnName(@"IsAssault").HasColumnType("bit").IsRequired();
            Property(x => x.IsStraightThroughProcess).HasColumnName(@"IsStraightThroughProcess").HasColumnType("bit").IsRequired();
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.CompCarePersonEventId).HasColumnName(@"CompCarePersonEventId").HasColumnType("int").IsOptional();
            Property(x => x.CompCareIntegrationMessageId).HasColumnName(@"CompCareIntegrationMessageId").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(350);
            Property(x => x.CompCarePevRefNumber).HasColumnName(@"CompCarePEVRefNumber").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(350);
            Property(x => x.DateOfStabilisation).HasColumnName(@"DateOfStabilisation").HasColumnType("date").IsOptional();
            Property(x => x.IsFatal).HasColumnName(@"IsFatal").HasColumnType("bit").IsOptional();
            Property(x => x.IsHijack).HasColumnName(@"IsHijack").HasColumnType("bit").IsRequired();

            // Foreign keys
            HasOptional(a => a.ClaimBucketClass).WithMany(b => b.PersonEvents).HasForeignKey(c => c.PersonEventBucketClassId).WillCascadeOnDelete(false); // FK_PersonEvent_ClaimBucketClass
            HasOptional(a => a.ParentInsuranceType).WithMany(b => b.PersonEvents).HasForeignKey(c => c.InsuranceTypeId).WillCascadeOnDelete(false); // FK_PersonEvent_ParentInsuranceType
            HasRequired(a => a.Event).WithMany(b => b.PersonEvents).HasForeignKey(c => c.EventId).WillCascadeOnDelete(false); // FK_PersonEvent_Event
        }
    }

}
