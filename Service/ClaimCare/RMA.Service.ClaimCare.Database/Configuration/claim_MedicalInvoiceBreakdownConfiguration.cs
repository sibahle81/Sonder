//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//		
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using RMA.Common.Database.Contracts.Repository;
using RMA.Service.Admin.MasterDataManager.Contracts.Enums;
using RMA.Service.ClaimCare.Database.Entities;

namespace RMA.Service.ClaimCare.Database.Configuration
{
    public class claim_MedicalInvoiceBreakdownConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<claim_MedicalInvoiceBreakdown>
    {
        public claim_MedicalInvoiceBreakdownConfiguration()
            : this("claim")
        {
        }

        public claim_MedicalInvoiceBreakdownConfiguration(string schema)
        {
            ToTable("MedicalInvoiceBreakdown", schema);
            HasKey(x => x.MedicalInvoiceBreakdownId);

            Property(x => x.MedicalInvoiceBreakdownId).HasColumnName(@"MedicalInvoiceBreakdownId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.MedicalInvoiceId).HasColumnName(@"MedicalInvoiceId").HasColumnType("int").IsRequired();
            Property(x => x.Quanitity).HasColumnName(@"Quanitity").HasColumnType("int").IsRequired();
            Property(x => x.LineCost).HasColumnName(@"LineCost").HasColumnType("decimal").IsOptional().HasPrecision(18,2);
            Property(x => x.LineVat).HasColumnName(@"LineVat").HasColumnType("decimal").IsOptional().HasPrecision(18,2);
            Property(x => x.TarrifLineCost).HasColumnName(@"TarrifLineCost").HasColumnType("decimal").IsOptional().HasPrecision(18,2);
            Property(x => x.TariffLineVat).HasColumnName(@"TariffLineVat").HasColumnType("decimal").IsOptional().HasPrecision(18,2);
            Property(x => x.CreditAmount).HasColumnName(@"CreditAmount").HasColumnType("decimal").IsOptional().HasPrecision(18,2);
            Property(x => x.AuthorisedAmount).HasColumnName(@"AuthorisedAmount").HasColumnType("decimal").IsOptional().HasPrecision(18,2);
            Property(x => x.AuthorisedVat).HasColumnName(@"AuthorisedVat").HasColumnType("decimal").IsOptional().HasPrecision(18,2);
            Property(x => x.TariffId).HasColumnName(@"TariffId").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.OtherTariffCode).HasColumnName(@"OtherTariffCode").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(1024);
            Property(x => x.ServiceDate).HasColumnName(@"ServiceDate").HasColumnType("date").IsOptional();
            Property(x => x.MedicalItemId).HasColumnName(@"MedicalItemId").HasColumnType("int").IsRequired();
            Property(x => x.UnitCost).HasColumnName(@"UnitCost").HasColumnType("decimal").IsOptional().HasPrecision(18,2);
            Property(x => x.Icd10Code).HasColumnName(@"Icd10Code").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.TreatmentAuthId).HasColumnName(@"TreatmentAuthId").HasColumnType("int").IsOptional();
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.MedicalInvoice).WithMany(b => b.MedicalInvoiceBreakdowns).HasForeignKey(c => c.MedicalInvoiceId).WillCascadeOnDelete(false); // FK_MedicalInvoiceBreakdown_MedicalInvoice
        }
    }

}
