using Microsoft.ServiceFabric.Services.Remoting;

using RMA.Common.Entities.DatabaseQuery;
using RMA.Service.Admin.MasterDataManager.Contracts.Entities;
using RMA.Service.Admin.MasterDataManager.Contracts.Enums;
using RMA.Service.ClientCare.Contracts.Entities.RolePlayer;
using RMA.Service.ClientCare.Contracts.Enums.RolePlayer;
using RMA.Service.Integrations.Contracts.Entities.Vopd;

using System.Collections.Generic;
using System.Threading.Tasks;

using Case = RMA.Service.ClientCare.Contracts.Entities.RolePlayer.Case;
using FinPayeeModel = RMA.Service.ClientCare.Contracts.Entities.RolePlayer.FinPayee;
using RolePlayerModel = RMA.Service.ClientCare.Contracts.Entities.RolePlayer.RolePlayer;
namespace RMA.Service.ClientCare.Contracts.Interfaces.RolePlayer
{
    public interface IRolePlayerService : IService
    {
        Task<RolePlayerModel> GetRolePlayer(int rolePlayerId);
        Task<RolePlayerExternal> GetRolePlayerForExternal(int rolePlayerId);
        Task<List<RolePlayerModel>> GetRolePlayersByIds(List<int> ids);
        Task<RolePlayerBankingDetail> GetBankDetailByBankAccountId(int bankAccountId);
        Task<RolePlayerModel> SearchRolePlayerByRegistrationNumber(KeyRoleEnum roleType, string registrationNum);
        Task<List<RolePlayerModel>> SearchRolePlayersByRegistrationNumber(KeyRoleEnum roleType, string registrationNum);
        Task<RolePlayerModel> GetRolePlayerRole(int rolePlayerId, KeyRoleEnum roleType);
        Task<List<RolePlayerModel>> GetRolePlayers();
        Task<bool> CheckVopdStatus(int rolePlayerId);
        Task<List<RolePlayerType>> GetRolePlayerTypes(List<int> rolePlayerTypeIds);
        Task<List<RolePlayerModel>> GetLinkedRolePlayers(int rolePlayerId, List<int> rolePlayerTypeIds);
        Task<List<RolePlayerRelation>> GetLinkedBeneficiaries(int policyId, int rolePlayerTypeId);
        Task<int> CreateRolePlayer(RolePlayerModel rolePlayer);
        Task<int> CreateRolePLayerWithoutRelation(RolePlayerModel rolePlayer);
        Task EditRolePlayer(RolePlayerModel rolePlayer);
        Task<List<RolePlayerModel>> GetAllPolicyOwners();
        Task<List<RolePlayerModel>> GetAllPolicyPayees();
        Task<List<RolePlayerModel>> GetAllFinancialServiceProviders();
        Task<List<RolePlayerModel>> GetAllClaimants();
        Task<List<RolePlayerModel>> GetAllMedicalServiceProviders();
        Task<List<RolePlayerModel>> GetAllBodyCollectors();
        Task<List<RolePlayerModel>> GetAllUndertakers();
        Task<List<RolePlayerModel>> GetAllFuneralParlors();
        Task<List<RolePlayerModel>> GetAllInsuredLives();
        Task<List<Entities.Policy.Policy>> GetAllPoliciesByInsureLifeId(int insuredLifeId);
        Task<List<RolePlayerModel>> GetInsuredLifeByPolicyId(int policyId);
        Task<List<RolePlayerModel>> GetRolePlayersByPolicyIds(List<int> policyIds, RolePlayerTypeEnum rolePlayerType);
        Task<PagedRequestResult<RolePlayerModel>> SearchRolePlayers(PagedRequest request);
        Task<List<RolePlayerModel>> GetPersonRolePlayerByIdNumber(IdTypeEnum idType, string query);
        Task<List<RolePlayerModel>> GetRolePlayerByIdNumber(string idNumber);
        Task RolePlayerGroupWizardSubmit(Case caseWizard);
        Task<Case> RolePlayerIndividualWizardSubmit(Case caseWizard);
        Task<bool> RolePlayerVopdRequest(Person rolePlayer);
        Task RolePlayerVopdMultipleRequest(Person rolePlayer);
        Task<bool> ReInstatePolicy();
        Task<bool> LapsePolicy();
        Task<bool> SendLapsePolicy30Days();
        Task<RolePlayerModel> GetRolePlayerForCase(int rolePlayerId);
        Task<int> SaveRolePlayer(RolePlayerModel rolePlayer, int parentRolePlayer, RolePlayerTypeEnum relation);
        Task<int> GetRolePlayerBankIdByRolePlayerId(int rolePlayerId);
        Task<RolePlayerModel> GetMainMember(int policyId);
        Task<List<RolePlayerType>> GetRolePlayerIsRelation();
        Task<int> AddBankingDetails(RolePlayerBankingDetail rolePlayerBankingDetail);
        Task<int> UpdateBankingDetails(RolePlayerBankingDetail rolePlayerBankingDetail);
        Task<List<RolePlayerModel>> GetRolePlayerRelations(int rolePlayerId, List<RolePlayerTypeEnum> rolePlayerTypes);
        Task<bool> UpdateRolePlayerRelations(RolePlayerRelation rolePlayerRelation);
        Task<RolePlayerModel> GetPersonDetailsByIdNumber(IdTypeEnum idType, string query);
        Task AddRolePlayerRelation(RolePlayerRelation rolePlayerRelation);
        Task<RolePlayerRelation> GetRelationByRolePlayerType(int fromRolePlayerId, RolePlayerTypeEnum rolePlayerTypeEnum, int policyId);
        Task<bool> DoesRelationExist(RolePlayerRelation rolePlayerRelation);
        Task<List<RolePlayerBankingDetail>> GetBankingDetailsByRolePlayerId(int rolePlayerId);
        Task<RolePlayerModel> StillBornDuplicateCheck(Person person);
        Task<List<AccountSearchResult>> SearchAccounts(PagedRequest request);
        Task<RolePlayerBankingDetail> GetActiveBankingDetails(int rolePlayerId);
        Task<FinPayeeModel> GetFinPayee(int rolePlayerId);
        Task<string> GetDisplayName(int rolePlayerId);
        Task<RolePlayerModel> GetRolePlayerWithoutReferenceData(int rolePlayerId);
        Task<string> GetEmail(int rolePlayerId);
        Task<RolePlayerRelation> GetDeceasedRelationToMainMember(int policyId, int insuredLifeId);
        Task<RolePlayerRelation> GettingMainMemberByPolicyAndToRolePlayerId(int policyId, int toRolePlayerId);
        Task<RolePlayerRelation> GetMainMemberByPolicyId(int policyId);
        Task<bool> CheckIfMainMember(int policyId, int insuredLifeId);
        Task<bool> CheckIfGroupPolicy(int policyId);
        Task UpdateRolePlayer(RolePlayerModel roleplayer);
        Task<int> RolePlayerVopdUpdate(VopdResponseMessage vopdMessage);
        Task<ClientVopdResponse> GetVOPDResponseResultByRoleplayerId(int rolePlayerId);
        Task<ClientVopdResponse> GetVOPDResponseResultByRoleplayerIdAndIdNumber(int rolePlayerId, string IdNumber);
        Task<FinPayeeModel> GetFinPayeeByFinpayeNumber(string finPayeNumber);
        Task<List<DebtorSearchResult>> SearchForFinPayees(string query);
        Task CreateClaimantFinPayee(RolePlayerModel claimantRecoveryModel);
        Task<RolePlayerModel> GetPolicyOwnerByPolicyId(int policyId);
        Task<int> CreateOnlyRolePlayer(RolePlayerModel rolePlayer);
        Task<FinPayeeModel> GetClaimRecoveryDebtorByBankStatementReference(string userReference);
        Task<Company> GetCompanyByReferenceNumber(string referenceNumber);
        Task<RolePlayerModel> GetPerson(int rolePlayerId);
        Task<RolePlayerModel> GetPersonRolePlayerRelations(int rolePlayerId);
        Task<RolePlayerModel> GetCompany(int rolePlayerId);
        Task<string> GetDebtorIndustryClassBankAccountNumber(string finPayeNumber);
        Task<FinPayeeModel> GetFinPayeeByRolePlayerId(int rolePlayerId);
        Task<BankAccount> GetDebtorIndustryClassBankAccount(string finPayeNumber);
        Task<QuickVopdResponseMessage> PersonVopdRequest(string saId);
        Task<bool> UserPlayerVopdRequest(string saId);
        Task<string> UserVopdUpdate(VopdResponseMessage vopdMessage);
        Task<List<UserVopdResponse>> GetProcessedUserVopdResponse();
        Task UpdateUserVopdIsProcessed(UserVopdResponse userVopdResponse);
        Task<PreviousInsurerRolePlayer> GetPreviousInsurerRolePlayer(int rolePlayerId);
        Task<UserVopdResponse> GetUserVopdResponseMessage(string idNumber);
        Task<RolePlayerModel> GetMemberPortalPolicyRolePlayer(int rolePlayerId);
        Task<int> CheckIfRolePlayerExists(string idNumber);
        Task<bool> RolePlayerExists(int roleplayerId);
        Task<List<Company>> GetCompaniesByNameOrNumber(string searchCriteria);
        Task<List<RolePlayerBankingDetail>> GetBankingDetailsByAccountNumber(string accountNumber);
        Task<List<RolePlayerContact>> GetRolePlayerContactDetails(int rolePlayerId);
        Task<int> CreateRolePlayerContactDetails(RolePlayerContact rolePlayerContact);
        Task<int> EditRolePlayerContactDetails(RolePlayerContact rolePlayerContact);
        Task<int> CreateFuneralParlor(FuneralParlor funeralParlor);
        Task<int> CreateUndertaker(Undertaker undertaker);
        Task<int> CreateBodyCollector(BodyCollector bodyCollector);
        Task<int> UpdateFuneralParlor(FuneralParlor funeralParlor);
        Task<int> UpdateUndertaker(Undertaker undertaker);
        Task<int> UpdateBodyCollector(BodyCollector bodyCollector);
        Task<int> CreatePersonEmployment(PersonEmployment personEmployment);
        Task<int> EditPersonEmployment(PersonEmployment personEmployment);
        Task SaveBeneficiaries(int mainMemberId, List<RolePlayerModel> beneficiaries, List<RolePlayerModel> roleplayers);
        Task<PersonEmployment> GetPersonEmployment(int personEmployeeId, int personEmployerId);
        Task<List<Company>> GetCoidCompaniesByNameOrNumber(string searchCriteria);
        Task<int> GetRolePlayerPolicyCount(int rolePlayerId);
        Task<IndustryClassEnum> GetDebtorIndustryClass(string finPayeNumber);
        Task<PersonEmployment> GetPersonEmploymentByIndustryNumber(string industryNumber);
        Task<bool> ResubmitVOPDRequest(Person rolePlayer);
        Task UpdateClientVopdResponse(ClientVopdResponse clientVopdResponse);
        Task<Company> GetCompanyByRolePlayer(int rolePlayerId);
        Task UpdatePerson(Person person);
        Task<RolePlayerModel> GetRolePlayerByIdentificationType(RolePlayerIdentificationTypeEnum rolePlayerIdentificationType, string identificationNumber);
        Task<RolePlayerModel> CreateRolePlayerProfile(RolePlayerModel rolePlayer);
        Task SaveBeneficiary(int mainMemberId, RolePlayerModel roleplayer);
        Task<int> SaveRolePlayerBeneficiaries(RolePlayerModel roleplayer);
        Task<RolePlayerBankingDetail> GetBankingDetailsForSTPIntegration(int rolePlayerId, int rolePlayerTypeId);
        Task ProcessVopdUpdateResponse(VopdUpdateResponseModel vopdUpdateResponseModel);
        Task ProcessRolePlayerBatchInfoUpdate(RolePlayerBatchInfoUpdate rolePlayerBatchInfoUpdate);
        Task ResubmitRolePlayerVopdRequest(Person rolePlayer);
        Task<List<ClientVopdResponse>> GetUnprocessedVopdRequest();
        Task<PagedRequestResult<RolePlayerContact>> GetPagedRolePlayerContacts(PagedRequest request);
        Task<RolePlayerModel> GetRolePlayerPersonalDetails(int rolePlayerId);
        Task<PagedRequestResult<RolePlayerModel>> GetPagedBeneficiaries(PagedRequest request);
        Task<RolePlayerModel> GetBeneficiary(int beneficiaryId);
        Task<PagedRequestResult<RolePlayerAddress>> GetPagedRolePlayerAddress(PagedRequest request);
        Task<bool> UpdateFinPayee(FinPayeeModel finpayee);
        Task<PagedRequestResult<RolePlayerBankingDetail>> GetPagedRolePlayerBankingDetails(PagedRequest pagedRequest);
        Task<bool> DeleteRolePlayerRelation(RolePlayerRelation rolePlayerRelation);
        Task<bool> OverrideRolePlayerVopd(VopdUpdateResponseModel vopdUpdateResponse);
        Task<RolePlayerModel> CreateDebtor(int rolePlayerId);
        Task<PagedRequestResult<RolePlayerModel>> SearchDebtors(int industryClassId, PagedRequest pagedRequest);
        Task<RolePlayerModel> GetRolePlayerPersonByIdOrPassport(string idPassportNumber);
        Task<PagedRequestResult<PersonEmployment>> GetPagedPersonEmployment(int employerRolePlayerId, int employeeRolePlayerId, PagedRequest pagedRequest);
        Task<PagedRequestResult<RolePlayerModel>> GetPagedRolePlayers(int rolePlayerIdentificationTypeId, PagedRequest pagedRequest);
        Task<PagedRequestResult<RolePlayerModel>> GetPagedRolePlayerRelations(int fromRolePlayerId, int rolePlayerTypeId, PagedRequest pagedRequest);
        Task<List<RolePlayerRelation>> GetAllRolePlayerRelations(int fromRolePlayerId);
        Task<PersonEmployment> GetPersonEmploymentByPersonEmploymentId(int personEmploymentId);
        Task<int> RolePlayerVopdUpdateFromCache(int RolePlayerId, string IdNumber);
        Task<PagedRequestResult<RolePlayerModel>> GetPagedRolePlayerPolicyRelations(int rolePlayerId, int policyId, int rolePlayerTypeId, PagedRequest pagedRequest);
        Task<List<string>> GetDebtorBankAccountNumbers(string finPayeeNumber);
        Task<List<RolePlayerModel>> GetBeneficiaries(List<int> roleplayerIds);
        Task<int> BulkDebtorHandover(List<FinPayee> finpayees);
    }
}