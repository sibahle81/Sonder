using Microsoft.ServiceFabric.Services.Remoting;

using RMA.Common.Entities;
using RMA.Common.Entities.DatabaseQuery;
using RMA.Service.Admin.MasterDataManager.Contracts.Enums;
using RMA.Service.ClientCare.Contracts.Entities.Dashboard;
using RMA.Service.ClientCare.Contracts.Entities.Policy;
using RMA.Service.ClientCare.Contracts.Entities.Product;
using RMA.Service.ClientCare.Contracts.Entities.RolePlayer;

using System;
using System.Collections.Generic;
using System.Threading.Tasks;

using PolicyModel = RMA.Service.ClientCare.Contracts.Entities.Policy.Policy;
using ProductOptionModel = RMA.Service.ClientCare.Contracts.Entities.Product.ProductOption;
using Roleplayer = RMA.Service.ClientCare.Contracts.Entities.RolePlayer.RolePlayer;

namespace RMA.Service.ClientCare.Contracts.Interfaces.Policy
{
    public interface IPolicyService : IService
    {
        Task<List<PolicyModel>> GetPolicies();
        Task<List<PolicyModel>> GetPoliciesInDateRange(DateTime fromDate, DateTime toDate);
        Task<List<PolicyModel>> GetPoliciesByIds(List<int> ids);
        Task<List<PolicyModel>> GetPoliciesByPolicyNumbers(List<string> policyNumbers);
        Task<PolicyModel> GetPolicy(int policyId);
        Task<PolicyModel> GetPolicyWithoutReferenceData(int policyId);
        Task<PolicyModel> GetPolicyByPolicyId(int policyId);
        Task<PolicyModel> AddPolicy(PolicyModel policy);
        Task EditPolicy(PolicyModel policy, bool updatePolicyPremium);
        Task<bool> IsNaturalEntityPolicy(int policyId);
        Task<List<PolicyModel>> GetPoliciesByBrokerageId(List<int> brokerIds);
        Task<List<PolicyBrokerage>> GetPolicyBrokerageByBrokerageId(int brokerageId);
        Task<List<PolicyBrokerage>> GetParentPolicyBrokerageByBrokerageId(int brokerageId);
        Task<PagedRequestResult<PolicyBrokerage>> GetParentPolicyBrokerageByStatusId(PagedRequest request, int statusId, int brokerageId);

        Task<List<PolicyBrokerage>> GetIndividualPolicyHoldersByBrokerageId(int brokerageId);
        Task<List<PolicyBrokerage>> GetChildPolicyBrokerageByParentPolicyId(int parentPolicyId);
        Task<PolicyModel> GetPolicyByNumber(string policyNumber);
        Task UpdatePolicyStatus(PolicyStatusChangeAudit policyStatusChangeAudit);
        Task<List<PolicyModel>> GetPoliciesByRolePlayer(int rolePlayerId);
        Task<List<PolicyModel>> GetPoliciesByPolicyOwner(int rolePlayerId);
        Task<ProductOptionModel> GetProductByPolicyId(int policyId);
        Task AddPolicyInsuredLife(int rolePlayerId, int policyId);
        Task<bool> ClientReferenceExists(string clientReference);
        Task<string> GetPolicyNumber(int policyId);
        Task<List<PolicyModel>> GetPoliciesByProductOptionsIds(List<int> productOptionIds);
        Task<List<PolicyInsuredLife>> GetPolicyInsuredLives(List<int> policyIds);
        Task<List<PolicyBroker>> GetPolicyBrokers(List<int> policyIds);
        Task<bool> CheckIfPolicyIsGroupOrIndividual(int policyId);
        Task<int> CreatePolicyInsuredLife(PolicyInsuredLife policyInsuredLife);
        Task<List<int>> GetProductIdsByPolicyIds(ProductPolicy productPolicy);
        Task<List<int>> GetPolicyIdsByRolePlayerId(int rolePlayerId);
        Task SendBulkGroupSchedules(int parentPolicyId, string recipients);
        Task SendSpecifiedGroupSchedules(int parentPolicyId, string recipients, List<string> policyNumbers);
        Task UpdateMemberRelations(RolePlayerPolicy policy, Roleplayer mainMember, List<Roleplayer> spouses, List<Roleplayer> children, List<Roleplayer> family, List<Roleplayer> beneficiaries);
        Task<bool> UpdatePolicyInsuredLife(PolicyInsuredLife policyInsuredLife);
        Task<List<string>> ImportPremiumListing(string fileName, bool createNewPolicies, FileContentImport content);
        Task<List<string>> ImportPremiumListingRawData(string fileName, bool createNewPolicies, FileContentImport content);
        Task<PolicyInsuredLife> GetPolicyInsuredLife(int policyId, int roleplayerId);
        Task<List<PolicyModel>> GetOnlyPoliciesByRolePlayer(int rolePlayerId);
        Task<List<PolicyModel>> GetPoliciesWithProductOptionByRolePlayer(int rolePlayerId);
        Task<PolicyModel> GetPolicyWithProductOptionByPolicyId(int policyId);
        Task<PolicyModel> GetPolicyAndAllData(int policyId);
        Task<List<CancellationSummary>> CancellationsSummaryPerYear();
        Task<List<CancellationSummary>> CancellationsSummaryPerMonth();
        Task<List<CancellationSummary>> CancellationsSummaryPerReason();
        Task<List<CancellationSummary>> CancellationsSummaryPerResolved();
        Task<PolicyModel> GetChildPolicy(int parentPolicyId, string clientReference, IdTypeEnum idType, string idNumber);
        Task<List<PolicyModel>> GetActivePolicies(List<int> ids);
        Task<List<PolicyModel>> GetPoliciesForMember(int memberId);
        Task<PagedRequestResult<PolicyModel>> GetAllPoliciesForMember(PagedRequest pagedRequest);
        Task<PagedRequestResult<ExternalPartnerPolicyData>> SearchExternalPartnerPolicies(PagedRequest pagedRequest);
        Task<int> SendPolicyInformationDocument(PolicyModel policyModel);
        Task<List<string>> GetCompaniesWithPolicy();
        Task<List<Company>> GetFuneralPolicyCompanies();
        Task<List<string>> GetCompaniesWithPolicyForBroker(string brokerName);
        Task<bool> LapsePolicy(string policyNumber, DateTime lapseDate);
        Task<bool> CancelPolicy(string policyNumber, DateTime cancelDate, PolicyCancelReasonEnum cancelReason);
        Task<bool> ReinstatePolicy(string policyNumber, DateTime reinstateDate);
        Task<PolicyModel> GetPolicyByQuoteId(int quoteId);
        Task<VapsPolicyDetails> GetVapsPolicyDetails(string policyNumber);
        Task<List<PolicyModel>> GetPoliciesWithStatus(PolicyStatusEnum policyStatus);
        Task<PagedRequestResult<PolicyModel>> GetChildPolicies(PagedRequest pagedRequest);
        Task<List<int>> GetChildPolicyIds(int parentPolicyId);
        Task UpdatePolciesStatus(List<PolicyModel> policies, PolicyStatusEnum policyStatus);
        Task UploadInsuredLives(List<UploadInsuredLife> insuredLives);
        Task<List<Dashboard>> GetActiveMembers();
        Task<List<Dashboard>> GetAmountInvoiced();
        Task<List<Dashboard>> GetNONCoidMetalMembersPerMonth();
        Task<List<Dashboard>> GetNONCoidMetalMembersPerProduct();
        Task<List<Dashboard>> GetNONCoidMiningMembersPerMonth();
        Task<List<Dashboard>> GetNONCoidMiningMembersPerProduct();
        Task<List<Dashboard>> GetActiveNumberOfMembersCLASSXIII();
        Task<List<Dashboard>> GetAmountInvoicedCLASSXIII();
        Task<List<Dashboard>> GetNumberOFLivesCLASSXIII();
        Task<List<Dashboard>> GetNumberOFLivesCLASSIV();
        Task<List<Dashboard>> GetAmountPaidCLASSIV();
        Task<List<Dashboard>> GetAmountPaidCLASSXIII();
        Task<List<Dashboard>> GetNewBusinessCOIDPoliciesCLASSXIII();
        Task<List<Dashboard>> GetNewBusinessCOIDPoliciesCLASSIV();
        Task<List<Dashboard>> GetMembersPerIndustryClassXIII();
        Task<List<Dashboard>> GetCancellationsCLASSXIII();
        Task<int> GetStillbornBenefitByPolicyId(int policyId);
        Task<StillbornBenefit> GetStillbornBenefit(List<int> policyIds);
        Task<List<Lookup>> GetPolicyInsurerLookup();
        Task<int> CreatePolicyMovement(string movementRefNo, int sourceBrokerageId1, int sourceRepresentativeId1, int targetBrokerageId, int targetRrepresentativeId, DateTime effectiveDate);
        Task<ChildCover> GetChildCover(int age);
        Task<ProductOptionModel> GetPolicyProductOption(int policyId);
        Task<List<BenefitModel>> GetBenefitsForSelectedPolicies(UpgradeDownGradePolicyCase policyCase);
        Task UpgradeDowngradePolicy(UpgradeDownGradePolicyCase @case);
        Task<int> UpgradeDowngradePolicies();
        Task<List<CompanyPolicy>> GetCompaniesWithLinkedPolicy();
        Task<PagedRequestResult<CompanyPolicy>> SearchCompaniesWithPolicy(PagedRequest pagedRequest);
        Task<PagedRequestResult<PolicyGroupMember>> GetPagedChildPolicies(PagedRequest request);
        Task<PagedRequestResult<PolicyGroupMember>> GetPagedPolicyInsuredLives(PagedRequest pagedRequest);
        Task<PagedRequestResult<PolicyNote>> GetPagedPolicyNotes(PagedRequest pagedRequest);
        Task<bool> UpdateAffordabilityCheck(AffordabilityCheck check);
        Task<int> ActivateFreePolicies();
        Task<List<PolicyStatusChangeAudit>> GetPolicyStatusChangeAudits(int policyId);
        Task<PagedRequestResult<PolicyStatusChangeAudit>> GetPagedPolicyStatusChangeAudit(PagedRequest pagedRequest);
        Task<PolicyLifeExtension> GetPolicyLifeExtension(int policyId);
        Task<int> GetChildPolicyCount(int parentPolicyId);
        Task<List<PolicyInsuredLife>> GetExtendedFamilyPolicy(int parentPolicyId);
        Task<List<PolicyModel>> GetDependentPolicies(int parentPolicyId);
        Task<List<PolicyMinimumData>> GetChildPoliciesMinimumData(int parentPolicyId);
        Task<PagedRequestResult<PolicyModel>> SearchPolicies(PagedRequest pagedRequest);
        Task<List<Cover>> GetPolicyCover(int policyId);
        Task<PagedRequestResult<Cover>> GetPagedPolicyCovers(int policyId, PagedRequest pagedRequest);
        Task<bool> MonitorFirstPremiumPendingPolicies();
        Task<UnderwriterEnum> GetUnderwriter(PolicyModel policy);
        Task<UnderwriterEnum> GetUnderwriterByPolicyId(int policyId);
        Task<bool> ProcessPolicyHolderBirthdayWishesTask();
        Task<List<Benefit>> GetBenefitsForProductOptionAtEffectiveDate(int productOptionId, DateTime effectiveDate);
        Task<List<PolicyBrokerage>> GetParentPolicyBrokerage();
        Task<List<PolicyModel>> GetPoliciesByRolePlayerIdNumber(string idNumber);
        Task<List<PolicyProductOptionModel>> GetPolicyProductOptionInformationByIdNumberAsync(string idNumber);
        Task<PolicyModel> GetPolicyOwnerByPolicy(int policyId);
        Task<List<PolicyTemplate>> GetPolicyTemplatesByPolicyId(int policyId);
        Task<List<string>> ImportExternalPartnerPolicyListing(string fileName, FileContentImport content);
        Task<bool> DeletePolicyScheduleDocumentByPolicyId(int policyId);

        Task<PolicyBrokerage> GetPolicyBrokerageByPolicyId(int policyId);
        Task<decimal> GetMainMemberFuneralPremium(int policyId, int spouseCount, int childCount);
        Task<List<int>> GetMissingPolicySchedules();

    }
}
