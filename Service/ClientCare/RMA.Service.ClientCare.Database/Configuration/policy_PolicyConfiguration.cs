//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//		
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using RMA.Common.Database.Contracts.Repository;
using RMA.Service.Admin.MasterDataManager.Contracts.Enums;
using RMA.Service.ClientCare.Database.Entities;

namespace RMA.Service.ClientCare.Database.Configuration
{
    public class policy_PolicyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<policy_Policy>
    {
        public policy_PolicyConfiguration()
            : this("policy")
        {
        }

        public policy_PolicyConfiguration(string schema)
        {
            ToTable("Policy", schema);
            HasKey(x => x.PolicyId);

            Property(x => x.PolicyId).HasColumnName(@"PolicyId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TenantId).HasColumnName(@"TenantId").HasColumnType("int").IsRequired();
            Property(x => x.InsurerId).HasColumnName(@"InsurerId").HasColumnType("int").IsRequired();
            Property(x => x.QuoteId).HasColumnName(@"QuoteId").HasColumnType("int").IsOptional();
            Property(x => x.BrokerageId).HasColumnName(@"BrokerageId").HasColumnType("int").IsRequired();
            Property(x => x.ProductOptionId).HasColumnName(@"ProductOptionId").HasColumnType("int").IsRequired();
            Property(x => x.RepresentativeId).HasColumnName(@"RepresentativeId").HasColumnType("int").IsRequired();
            Property(x => x.JuristicRepresentativeId).HasColumnName(@"JuristicRepresentativeId").HasColumnType("int").IsOptional();
            Property(x => x.PolicyOwnerId).HasColumnName(@"PolicyOwnerId").HasColumnType("int").IsRequired();
            Property(x => x.PolicyPayeeId).HasColumnName(@"PolicyPayeeId").HasColumnType("int").IsRequired();
            Property(x => x.PaymentFrequency).HasColumnName(@"PaymentFrequencyId").HasColumnType("int").IsOptional();
            Property(x => x.PaymentMethod).HasColumnName(@"PaymentMethodId").HasColumnType("int").IsOptional();
            Property(x => x.PolicyNumber).HasColumnName(@"PolicyNumber").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.PolicyInceptionDate).HasColumnName(@"PolicyInceptionDate").HasColumnType("date").IsRequired();
            Property(x => x.ExpiryDate).HasColumnName(@"ExpiryDate").HasColumnType("date").IsOptional();
            Property(x => x.CancellationInitiatedDate).HasColumnName(@"CancellationInitiatedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.CancellationInitiatedBy).HasColumnName(@"CancellationInitiatedBy").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.CancellationDate).HasColumnName(@"CancellationDate").HasColumnType("date").IsOptional();
            Property(x => x.PolicyCancelReason).HasColumnName(@"PolicyCancelReasonId").HasColumnType("int").IsOptional();
            Property(x => x.FirstInstallmentDate).HasColumnName(@"FirstInstallmentDate").HasColumnType("date").IsRequired();
            Property(x => x.LastInstallmentDate).HasColumnName(@"LastInstallmentDate").HasColumnType("date").IsOptional();
            Property(x => x.RegularInstallmentDayOfMonth).HasColumnName(@"RegularInstallmentDayOfMonth").HasColumnType("int").IsOptional();
            Property(x => x.DecemberInstallmentDayOfMonth).HasColumnName(@"DecemberInstallmentDayOfMonth").HasColumnType("int").IsOptional();
            Property(x => x.PolicyStatus).HasColumnName(@"PolicyStatusId").HasColumnType("int").IsRequired();
            Property(x => x.AnnualPremium).HasColumnName(@"AnnualPremium").HasColumnType("money").IsRequired().HasPrecision(19,4);
            Property(x => x.InstallmentPremium).HasColumnName(@"InstallmentPremium").HasColumnType("money").IsRequired().HasPrecision(19,4);
            Property(x => x.AdminPercentage).HasColumnName(@"AdminPercentage").HasColumnType("decimal").IsRequired().HasPrecision(5,4);
            Property(x => x.CommissionPercentage).HasColumnName(@"CommissionPercentage").HasColumnType("decimal").IsRequired().HasPrecision(5,4);
            Property(x => x.BinderFeePercentage).HasColumnName(@"BinderFeePercentage").HasColumnType("decimal").IsRequired().HasPrecision(5,4);
            Property(x => x.PremiumAdjustmentPercentage).HasColumnName(@"PremiumAdjustmentPercentage").HasColumnType("decimal").IsRequired().HasPrecision(6,4);
            Property(x => x.ClientReference).HasColumnName(@"ClientReference").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.LastLapsedDate).HasColumnName(@"LastLapsedDate").HasColumnType("date").IsOptional();
            Property(x => x.LapsedCount).HasColumnName(@"LapsedCount").HasColumnType("int").IsOptional();
            Property(x => x.LastReinstateDate).HasColumnName(@"LastReinstateDate").HasColumnType("date").IsOptional();
            Property(x => x.ReinstateReason).HasColumnName(@"ReinstateReasonId").HasColumnType("int").IsOptional();
            Property(x => x.PolicyMovementId).HasColumnName(@"PolicyMovementId").HasColumnType("int").IsOptional();
            Property(x => x.ParentPolicyId).HasColumnName(@"ParentPolicyId").HasColumnType("int").IsOptional();
            Property(x => x.PolicyPauseDate).HasColumnName(@"PolicyPauseDate").HasColumnType("datetime").IsOptional();
            Property(x => x.CanLapse).HasColumnName(@"CanLapse").HasColumnType("bit").IsRequired();
            Property(x => x.IsEuropAssist).HasColumnName(@"IsEuropAssist").HasColumnType("bit").IsRequired();
            Property(x => x.EuropAssistEffectiveDate).HasColumnName(@"EuropAssistEffectiveDate").HasColumnType("date").IsOptional();
            Property(x => x.EuropAssistEndDate).HasColumnName(@"EuropAssistEndDate").HasColumnType("date").IsOptional();
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasOptional(a => a.JuristicRepresentative).WithMany(b => b.Policies_JuristicRepresentativeId).HasForeignKey(c => c.JuristicRepresentativeId).WillCascadeOnDelete(false); // FK_Policy_Representative1
            HasOptional(a => a.ParentPolicy).WithMany(b => b.Policies).HasForeignKey(c => c.ParentPolicyId).WillCascadeOnDelete(false); // FK_Policy_Policy
            HasOptional(a => a.PolicyMovement).WithMany(b => b.Policies).HasForeignKey(c => c.PolicyMovementId).WillCascadeOnDelete(false); // FK_Policy_PolicyMovements
            HasOptional(a => a.QuoteV2).WithMany(b => b.Policies).HasForeignKey(c => c.QuoteId).WillCascadeOnDelete(false); // FK_Policy_Quote_V2
            HasRequired(a => a.Brokerage).WithMany(b => b.Policies).HasForeignKey(c => c.BrokerageId).WillCascadeOnDelete(false); // FK_Policy_Brokerage
            HasRequired(a => a.Insurer).WithMany(b => b.Policies).HasForeignKey(c => c.InsurerId).WillCascadeOnDelete(false); // FK_Policy_Insurer
            HasRequired(a => a.PolicyOwner).WithMany(b => b.Policies_PolicyOwnerId).HasForeignKey(c => c.PolicyOwnerId).WillCascadeOnDelete(false); // FK_Policy_RolePlayer
            HasRequired(a => a.PolicyPayee).WithMany(b => b.Policies_PolicyPayeeId).HasForeignKey(c => c.PolicyPayeeId).WillCascadeOnDelete(false); // FK_Policy_RolePlayer1
            HasRequired(a => a.ProductOption).WithMany(b => b.Policies).HasForeignKey(c => c.ProductOptionId).WillCascadeOnDelete(false); // FK_Policy_ProductOption
            HasRequired(a => a.Representative).WithMany(b => b.Policies_RepresentativeId).HasForeignKey(c => c.RepresentativeId).WillCascadeOnDelete(false); // FK_Policy_Representative
        }
    }

}
