//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//		
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using RMA.Common.Database.Contracts.Repository;
using RMA.Service.Admin.MasterDataManager.Contracts.Enums;
using RMA.Service.FinCare.Contracts.Enums;
using RMA.Service.FinCare.Database.Configuration;
using RMA.Service.FinCare.Database.Context;
using RMA.Service.FinCare.Database.Entities;

namespace RMA.Service.FinCare.Database.Context
{

    public partial class EfDbContext : RMA.Common.Database.Repository.RmaDbContext
    {
        static EfDbContext()
        {
            System.Data.Entity.Database.SetInitializer<EfDbContext>(null);
        }

        public EfDbContext()
            : base()
        {
            InitializePartial();
        }

        public EfDbContext(string nameOrConnectionString)
            : base(nameOrConnectionString)
        {
            InitializePartial();
        }

        protected override void Dispose(bool disposing)
        {
            DisposePartial(disposing);
            base.Dispose(disposing);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new billing_AbilityCollectionConfiguration());
            modelBuilder.Configurations.Add(new billing_AbilityCollectionsAuditConfiguration());
            modelBuilder.Configurations.Add(new billing_AbilityTransactionsAuditConfiguration());
            modelBuilder.Configurations.Add(new billing_AdhocPaymentInstructionConfiguration());
            modelBuilder.Configurations.Add(new billing_AdhocPaymentInstructionsTermArrangementScheduleConfiguration());
            modelBuilder.Configurations.Add(new billing_AgeAnalysisAgentConfiguration());
            modelBuilder.Configurations.Add(new billing_AgeAnalysisNoteConfiguration());
            modelBuilder.Configurations.Add(new billing_AllocationLookupConfiguration());
            modelBuilder.Configurations.Add(new billing_AuditLogConfiguration());
            modelBuilder.Configurations.Add(new billing_AutoAllocationBankAccountConfiguration());
            modelBuilder.Configurations.Add(new billing_BatchInvoiceConfiguration());
            modelBuilder.Configurations.Add(new billing_BatchInvoiceDetailConfiguration());
            modelBuilder.Configurations.Add(new billing_BundleRaiseDetailConfiguration());
            modelBuilder.Configurations.Add(new billing_BundleRaiseHeaderConfiguration());
            modelBuilder.Configurations.Add(new billing_ClaimRecoveryInvoiceConfiguration());
            modelBuilder.Configurations.Add(new billing_CollectionConfiguration());
            modelBuilder.Configurations.Add(new billing_CollectionBatchConfiguration());
            modelBuilder.Configurations.Add(new billing_CompanyBranchConfiguration());
            modelBuilder.Configurations.Add(new billing_CompanyBranchBankAccountConfiguration());
            modelBuilder.Configurations.Add(new billing_CompanyBranchControlConfiguration());
            modelBuilder.Configurations.Add(new billing_DebitTransactionAllocationConfiguration());
            modelBuilder.Configurations.Add(new billing_DebtorStatusProductCategoryConfiguration());
            modelBuilder.Configurations.Add(new billing_DebtorStatusRuleConfiguration());
            modelBuilder.Configurations.Add(new billing_EarnedPremiumConfiguration());
            modelBuilder.Configurations.Add(new billing_EmailedDocumentConfiguration());
            modelBuilder.Configurations.Add(new billing_ForecastRateConfiguration());
            modelBuilder.Configurations.Add(new billing_IndustryFinancialYearConfiguration());
            modelBuilder.Configurations.Add(new billing_InterBankTransferConfiguration());
            modelBuilder.Configurations.Add(new billing_InterBankTransferDetailConfiguration());
            modelBuilder.Configurations.Add(new billing_InterBankTransferNoteConfiguration());
            modelBuilder.Configurations.Add(new billing_InterDebtorTransferConfiguration());
            modelBuilder.Configurations.Add(new billing_InterDebtorTransferDetailConfiguration());
            modelBuilder.Configurations.Add(new billing_InterDebtorTransferNoteConfiguration());
            modelBuilder.Configurations.Add(new billing_InterestConfiguration());
            modelBuilder.Configurations.Add(new billing_InterestIndicatorConfiguration());
            modelBuilder.Configurations.Add(new billing_InvoiceConfiguration());
            modelBuilder.Configurations.Add(new billing_InvoiceAllocationConfiguration());
            modelBuilder.Configurations.Add(new billing_InvoiceDetailConfiguration());
            modelBuilder.Configurations.Add(new billing_InvoicedItemTypeConfiguration());
            modelBuilder.Configurations.Add(new billing_InvoiceLineItemConfiguration());
            modelBuilder.Configurations.Add(new billing_LastViewedConfiguration());
            modelBuilder.Configurations.Add(new billing_LegalCommissionReconConfiguration());
            modelBuilder.Configurations.Add(new billing_NoteConfiguration());
            modelBuilder.Configurations.Add(new billing_PolicyPaymentAllocationConfiguration());
            modelBuilder.Configurations.Add(new billing_PremiumListingTransactionConfiguration());
            modelBuilder.Configurations.Add(new billing_PremiumTransactionPaymentFileConfiguration());
            modelBuilder.Configurations.Add(new billing_QLinkPaymentRecordConfiguration());
            modelBuilder.Configurations.Add(new billing_RefundHeaderConfiguration());
            modelBuilder.Configurations.Add(new billing_RefundHeaderDetailConfiguration());
            modelBuilder.Configurations.Add(new billing_RefundRoleLimitConfiguration());
            modelBuilder.Configurations.Add(new billing_RmaBankAccountConfiguration());
            modelBuilder.Configurations.Add(new billing_SuspenseDebtorBankMappingConfiguration());
            modelBuilder.Configurations.Add(new billing_TermArrangementConfiguration());
            modelBuilder.Configurations.Add(new billing_TermArrangementProductOptionConfiguration());
            modelBuilder.Configurations.Add(new billing_TermArrangementScheduleConfiguration());
            modelBuilder.Configurations.Add(new billing_TermBulkAllocationConfiguration());
            modelBuilder.Configurations.Add(new billing_TermDebitOrderBankingDetailConfiguration());
            modelBuilder.Configurations.Add(new billing_TermDebitOrderRolePlayerBankingDetailConfiguration());
            modelBuilder.Configurations.Add(new billing_TermsArrangementNoteConfiguration());
            modelBuilder.Configurations.Add(new billing_TermScheduleAllocationConfiguration());
            modelBuilder.Configurations.Add(new billing_TransactionConfiguration());
            modelBuilder.Configurations.Add(new billing_TransactionsBckConfiguration());
            modelBuilder.Configurations.Add(new billing_TransactionTypeLinkConfiguration());
            modelBuilder.Configurations.Add(new billing_UnallocatedPaymentConfiguration());
            modelBuilder.Configurations.Add(new billing_UnmetPaymentConfiguration());
            modelBuilder.Configurations.Add(new billing_UnpaidCodeDescriptionConfiguration());
            modelBuilder.Configurations.Add(new commission_ClawBackAccountConfiguration());
            modelBuilder.Configurations.Add(new commission_ClawBackAccountMovementConfiguration());
            modelBuilder.Configurations.Add(new commission_ClawedBackCommConfiguration());
            modelBuilder.Configurations.Add(new commission_CommisionPaymentBatchConfiguration());
            modelBuilder.Configurations.Add(new commission_CommissionConfigConfiguration());
            modelBuilder.Configurations.Add(new commission_CommissionPaymentHistoryConfiguration());
            modelBuilder.Configurations.Add(new commission_CommissionTypeConfiguration());
            modelBuilder.Configurations.Add(new commission_CommScheduleConfiguration());
            modelBuilder.Configurations.Add(new commission_CommValidationConfiguration());
            modelBuilder.Configurations.Add(new commission_DetailConfiguration());
            modelBuilder.Configurations.Add(new commission_HeaderConfiguration());
            modelBuilder.Configurations.Add(new commission_InvoicePaymentAllocationConfiguration());
            modelBuilder.Configurations.Add(new commission_PaymentBatchConfiguration());
            modelBuilder.Configurations.Add(new commission_PaymentInstructionConfiguration());
            modelBuilder.Configurations.Add(new commission_PeriodConfiguration());
            modelBuilder.Configurations.Add(new commission_PolicyCommissionConfiguration());
            modelBuilder.Configurations.Add(new commission_PolicyImportConfiguration());
            modelBuilder.Configurations.Add(new commission_PolicyImportErrorConfiguration());
            modelBuilder.Configurations.Add(new commission_PolicyStatuConfiguration());
            modelBuilder.Configurations.Add(new commission_RetainedCommConfiguration());
            modelBuilder.Configurations.Add(new commission_UpFrontCommissionCalcConfiguration());
            modelBuilder.Configurations.Add(new commission_ValidationTypeConfiguration());
            modelBuilder.Configurations.Add(new finance_AbilityPostingConfiguration());
            modelBuilder.Configurations.Add(new finance_AbilityPosting2Configuration());
            modelBuilder.Configurations.Add(new finance_AbilityPosting3Configuration());
            modelBuilder.Configurations.Add(new finance_AbilityPostingAuditConfiguration());
            modelBuilder.Configurations.Add(new finance_BankAccountVerificationConfiguration());
            modelBuilder.Configurations.Add(new finance_BankAccountVerificationRequestConfiguration());
            modelBuilder.Configurations.Add(new finance_BankStatementConfiguration());
            modelBuilder.Configurations.Add(new finance_BankStatementEntryConfiguration());
            modelBuilder.Configurations.Add(new finance_ProductCrossRefBankAccountConfiguration());
            modelBuilder.Configurations.Add(new finance_ProductCrossRefTranTypeConfiguration());
            modelBuilder.Configurations.Add(new finance_ProductCrossRefTranTypeTempConfiguration());
            modelBuilder.Configurations.Add(new finance_RecoveryReceiptConfiguration());
            modelBuilder.Configurations.Add(new finance_RecoveryReceiptAllocationConfiguration());
            modelBuilder.Configurations.Add(new finance_RecoveryReceiptDeductionConfiguration());
            modelBuilder.Configurations.Add(new finance_RefundHeaderConfiguration());
            modelBuilder.Configurations.Add(new finance_RefundHeaderDetailConfiguration());
            modelBuilder.Configurations.Add(new Load_BankStatementEntryStagingConfiguration());
            modelBuilder.Configurations.Add(new Load_BenefitConfiguration());
            modelBuilder.Configurations.Add(new Load_BenefitsUploadErrorAuditConfiguration());
            modelBuilder.Configurations.Add(new Load_BulkAllocationFileConfiguration());
            modelBuilder.Configurations.Add(new Load_BulkManualAllocationConfiguration());
            modelBuilder.Configurations.Add(new Load_BulkPaymentListingConfiguration());
            modelBuilder.Configurations.Add(new Load_CdaPolicyScheduleEmailQueueConfiguration());
            modelBuilder.Configurations.Add(new Load_ClientClass13RatesConfiguration());
            modelBuilder.Configurations.Add(new Load_ClientClass4RatesConfiguration());
            modelBuilder.Configurations.Add(new Load_ConsolidatedFuneralConfiguration());
            modelBuilder.Configurations.Add(new Load_ConsolidatedFuneralBankConfiguration());
            modelBuilder.Configurations.Add(new Load_ConsolidatedFuneralBenefitConfiguration());
            modelBuilder.Configurations.Add(new Load_ConsolidatedFuneralDeductionConfiguration());
            modelBuilder.Configurations.Add(new Load_ConsolidatedFuneralErrorConfiguration());
            modelBuilder.Configurations.Add(new Load_ConsolidatedFuneralFileConfiguration());
            modelBuilder.Configurations.Add(new Load_ConsolidatedFuneralInsuranceConfiguration());
            modelBuilder.Configurations.Add(new Load_ConsolidatedFuneralMemberConfiguration());
            modelBuilder.Configurations.Add(new Load_DiscountFileConfiguration());
            modelBuilder.Configurations.Add(new Load_DiscountFileAuditConfiguration());
            modelBuilder.Configurations.Add(new Load_DiscountFileListingConfiguration());
            modelBuilder.Configurations.Add(new Load_ExternalPartnerPolicyDataConfiguration());
            modelBuilder.Configurations.Add(new Load_FuneralPremiumConfiguration());
            modelBuilder.Configurations.Add(new Load_GpaConfiguration());
            modelBuilder.Configurations.Add(new Load_GpaFileConfiguration());
            modelBuilder.Configurations.Add(new Load_GpaMemberConfiguration());
            modelBuilder.Configurations.Add(new Load_GroupPolicyScheduleBatchConfiguration());
            modelBuilder.Configurations.Add(new Load_IndustryRateConfiguration());
            modelBuilder.Configurations.Add(new Load_InsuredLifeConfiguration());
            modelBuilder.Configurations.Add(new Load_InsuredLivesBenefitConfiguration());
            modelBuilder.Configurations.Add(new Load_InsuredLivesCompanyConfiguration());
            modelBuilder.Configurations.Add(new Load_InsuredLivesErrorConfiguration());
            modelBuilder.Configurations.Add(new Load_InsuredLivesMemberConfiguration());
            modelBuilder.Configurations.Add(new Load_InsuredLivesMessageConfiguration());
            modelBuilder.Configurations.Add(new Load_LeadConfiguration());
            modelBuilder.Configurations.Add(new Load_LeadsProductConfiguration());
            modelBuilder.Configurations.Add(new Load_LeadsProductWizardConfiguration());
            modelBuilder.Configurations.Add(new Load_LeadsUploadErrorAuditConfiguration());
            modelBuilder.Configurations.Add(new Load_LeadTimeTrackerConfiguration());
            modelBuilder.Configurations.Add(new Load_LegalHandOverFileConfiguration());
            modelBuilder.Configurations.Add(new Load_LegalHandOverFileDetailConfiguration());
            modelBuilder.Configurations.Add(new Load_MemberCancelConfiguration());
            modelBuilder.Configurations.Add(new Load_MyValuePluConfiguration());
            modelBuilder.Configurations.Add(new Load_MyValuePlusBankConfiguration());
            modelBuilder.Configurations.Add(new Load_MyValuePlusBenefitConfiguration());
            modelBuilder.Configurations.Add(new Load_MyValuePlusDeductionConfiguration());
            modelBuilder.Configurations.Add(new Load_MyValuePlusErrorConfiguration());
            modelBuilder.Configurations.Add(new Load_MyValuePlusFileConfiguration());
            modelBuilder.Configurations.Add(new Load_MyValuePlusInsuranceConfiguration());
            modelBuilder.Configurations.Add(new Load_MyValuePlusMemberConfiguration());
            modelBuilder.Configurations.Add(new Load_PaymentStagingConfiguration());
            modelBuilder.Configurations.Add(new Load_PaymentStagingFileConfiguration());
            modelBuilder.Configurations.Add(new Load_PostRetirementMedicalAidDataConfiguration());
            modelBuilder.Configurations.Add(new Load_PostRetirementMedicalAidInvoiceDetailConfiguration());
            modelBuilder.Configurations.Add(new Load_PostRetirementMedicalAidInvoiceHeaderConfiguration());
            modelBuilder.Configurations.Add(new Load_PostRetirementMedicalAnnuityDataConfiguration());
            modelBuilder.Configurations.Add(new Load_PostRetirementMedicalAnnuityLatestDataConfiguration());
            modelBuilder.Configurations.Add(new Load_PremiumListingConfiguration());
            modelBuilder.Configurations.Add(new Load_PremiumListingBenefitConfiguration());
            modelBuilder.Configurations.Add(new Load_PremiumListingCompanyConfiguration());
            modelBuilder.Configurations.Add(new Load_PremiumListingErrorConfiguration());
            modelBuilder.Configurations.Add(new Load_PremiumListingFileConfiguration());
            modelBuilder.Configurations.Add(new Load_PremiumListingMemberConfiguration());
            modelBuilder.Configurations.Add(new Load_PremiumListingMessageConfiguration());
            modelBuilder.Configurations.Add(new Load_PremiumListingPaymentConfiguration());
            modelBuilder.Configurations.Add(new Load_PremiumListingPaymentErrorConfiguration());
            modelBuilder.Configurations.Add(new Load_PremiumListingPaymentFileConfiguration());
            modelBuilder.Configurations.Add(new Load_PremiumListingPolicyPremiumMovementConfiguration());
            modelBuilder.Configurations.Add(new Load_PremiumPaymentDueCreditNoteConfiguration());
            modelBuilder.Configurations.Add(new Load_PremiumPaymentFileValidationConfiguration());
            modelBuilder.Configurations.Add(new Load_PremiumPaymentFileValidationContentConfiguration());
            modelBuilder.Configurations.Add(new Load_PremiumWriteOffContentConfiguration());
            modelBuilder.Configurations.Add(new Load_PremiumWriteOffFileConfiguration());
            modelBuilder.Configurations.Add(new Load_QLinkPaymentRecordStagingConfiguration());
            modelBuilder.Configurations.Add(new Load_RateConfiguration());
            modelBuilder.Configurations.Add(new Load_RatesUploadErrorAuditConfiguration());
            modelBuilder.Configurations.Add(new Load_StageGroupRiskConfiguration());
            modelBuilder.Configurations.Add(new Load_StageGroupRiskErrorConfiguration());
            modelBuilder.Configurations.Add(new Load_StagePolicyIntegrationRequestConfiguration());
            modelBuilder.Configurations.Add(new Load_StagePostRetirementMedicalAidConfiguration());
            modelBuilder.Configurations.Add(new Load_StagePostRetirementMedicalAnnuityConfiguration());
            modelBuilder.Configurations.Add(new Load_ThirdPartyPolicyListingConfiguration());
            modelBuilder.Configurations.Add(new Load_ThirdPartyPolicyListingErrorConfiguration());
            modelBuilder.Configurations.Add(new payment_AllocationConfiguration());
            modelBuilder.Configurations.Add(new payment_AuditLogConfiguration());
            modelBuilder.Configurations.Add(new payment_EuropeAssistPaymentConfiguration());
            modelBuilder.Configurations.Add(new payment_FacsTransactionResultConfiguration());
            modelBuilder.Configurations.Add(new payment_FinancialPeriodConfiguration());
            modelBuilder.Configurations.Add(new payment_GroupCompanyConfiguration());
            modelBuilder.Configurations.Add(new payment_LastViewedConfiguration());
            modelBuilder.Configurations.Add(new payment_ManageFinanceUserConfiguration());
            modelBuilder.Configurations.Add(new payment_NoteConfiguration());
            modelBuilder.Configurations.Add(new payment_PaymentConfiguration());
            modelBuilder.Configurations.Add(new payment_PaymentAccountConfiguration());
            modelBuilder.Configurations.Add(new payment_PaymentErrorAuditConfiguration());
            modelBuilder.Configurations.Add(new payment_PaymentPensionRejectConfiguration());
            modelBuilder.Configurations.Add(new payment_PaymentRejectionCodeConfiguration());
            modelBuilder.Configurations.Add(new payment_PaymentSubmissionBatchConfiguration());
            modelBuilder.Configurations.Add(new payment_ProductCrossRefTranTypeConfiguration());

            OnModelCreatingPartial(modelBuilder);
        }

        partial void InitializePartial();
        partial void DisposePartial(bool disposing);
        partial void OnModelCreatingPartial(System.Data.Entity.DbModelBuilder modelBuilder);
    }
}
