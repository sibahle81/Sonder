//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//		
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using RMA.Common.Database.Contracts.Repository;
using RMA.Service.Admin.MasterDataManager.Contracts.Enums;
using RMA.Service.FinCare.Contracts.Enums;
using RMA.Service.FinCare.Database.Entities;

namespace RMA.Service.FinCare.Database.Configuration
{
    public class commission_DetailConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<commission_Detail>
    {
        public commission_DetailConfiguration()
            : this("commission")
        {
        }

        public commission_DetailConfiguration(string schema)
        {
            ToTable("Detail", schema);
            HasKey(x => x.DetailId);

            Property(x => x.DetailId).HasColumnName(@"DetailId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.HeaderId).HasColumnName(@"HeaderId").HasColumnType("int").IsRequired();
            Property(x => x.InvoicePaymentAllocationId).HasColumnName(@"InvoicePaymentAllocationId").HasColumnType("int").IsOptional();
            Property(x => x.InvoiceNumber).HasColumnName(@"InvoiceNumber").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.PolicyNumber).HasColumnName(@"PolicyNumber").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.RepCode).HasColumnName(@"RepCode").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(20);
            Property(x => x.RepName).HasColumnName(@"RepName").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(200);
            Property(x => x.AllocatedAmount).HasColumnName(@"AllocatedAmount").HasColumnType("decimal").IsRequired().HasPrecision(18,2);
            Property(x => x.CommissionPercentage).HasColumnName(@"CommissionPercentage").HasColumnType("float").IsRequired();
            Property(x => x.AdminPercentage).HasColumnName(@"AdminPercentage").HasColumnType("float").IsRequired();
            Property(x => x.CommissionFormula).HasColumnName(@"CommissionFormula").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(500);
            Property(x => x.CommissionAmount).HasColumnName(@"CommissionAmount").HasColumnType("decimal").IsRequired().HasPrecision(18,2);
            Property(x => x.AdminServiceFeeFormula).HasColumnName(@"AdminServiceFeeFormula").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(500);
            Property(x => x.AdminServiceFeeAmount).HasColumnName(@"AdminServiceFeeAmount").HasColumnType("decimal").IsRequired().HasPrecision(18,2);
            Property(x => x.TotalAmount).HasColumnName(@"TotalAmount").HasColumnType("decimal").IsRequired().HasPrecision(18,2);
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasOptional(a => a.InvoicePaymentAllocation).WithMany(b => b.Details).HasForeignKey(c => c.InvoicePaymentAllocationId).WillCascadeOnDelete(false); // FK_Detail_InvoicePaymentAllocation
            HasRequired(a => a.Header).WithMany(b => b.Details).HasForeignKey(c => c.HeaderId).WillCascadeOnDelete(false); // FK_Detail_Header
        }
    }

}
