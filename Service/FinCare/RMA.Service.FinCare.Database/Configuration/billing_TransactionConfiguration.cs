//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//		
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using RMA.Common.Database.Contracts.Repository;
using RMA.Service.Admin.MasterDataManager.Contracts.Enums;
using RMA.Service.FinCare.Contracts.Enums;
using RMA.Service.FinCare.Database.Entities;

namespace RMA.Service.FinCare.Database.Configuration
{
    public class billing_TransactionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<billing_Transaction>
    {
        public billing_TransactionConfiguration()
            : this("billing")
        {
        }

        public billing_TransactionConfiguration(string schema)
        {
            ToTable("Transactions", schema);
            HasKey(x => x.TransactionId);

            Property(x => x.TransactionId).HasColumnName(@"TransactionId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.InvoiceId).HasColumnName(@"InvoiceId").HasColumnType("int").IsOptional();
            Property(x => x.RolePlayerId).HasColumnName(@"RolePlayerId").HasColumnType("int").IsRequired();
            Property(x => x.BankStatementEntryId).HasColumnName(@"BankStatementEntryId").HasColumnType("int").IsOptional();
            Property(x => x.TransactionTypeLinkId).HasColumnName(@"TransactionTypeLinkId").HasColumnType("int").IsRequired();
            Property(x => x.Amount).HasColumnName(@"Amount").HasColumnType("decimal").IsRequired().HasPrecision(18,2);
            Property(x => x.TransactionDate).HasColumnName(@"TransactionDate").HasColumnType("datetime").IsRequired();
            Property(x => x.BankReference).HasColumnName(@"BankReference").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.TransactionType).HasColumnName(@"TransactionTypeId").HasColumnType("int").IsRequired();
            Property(x => x.Reason).HasColumnName(@"Reason").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(255);
            Property(x => x.RmaReference).HasColumnName(@"RmaReference").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(100);
            Property(x => x.LinkedTransactionId).HasColumnName(@"LinkedTransactionId").HasColumnType("int").IsOptional();
            Property(x => x.ClaimRecoveryInvoiceId).HasColumnName(@"ClaimRecoveryInvoiceId").HasColumnType("int").IsOptional();
            Property(x => x.IsLogged).HasColumnName(@"IsLogged").HasColumnType("bit").IsOptional();
            Property(x => x.AdhocPaymentInstructionId).HasColumnName(@"AdhocPaymentInstructionId").HasColumnType("int").IsOptional();
            Property(x => x.IsReAllocation).HasColumnName(@"IsReAllocation").HasColumnType("bit").IsOptional();
            Property(x => x.Balance).HasColumnName(@"Balance").HasColumnType("decimal").IsOptional().HasPrecision(18,2);
            Property(x => x.PremiumListingTransactionId).HasColumnName(@"PremiumListingTransactionId").HasColumnType("int").IsOptional();
            Property(x => x.DeletedReason).HasColumnName(@"DeletedReasonId").HasColumnType("int").IsOptional();
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired();
            Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType("datetime").IsRequired();
            Property(x => x.TransactionReason).HasColumnName(@"TransactionReasonId").HasColumnType("int").IsOptional();
            Property(x => x.IsBackDated).HasColumnName(@"IsBackDated").HasColumnType("bit").IsOptional();
            Property(x => x.TransactionEffectiveDate).HasColumnName(@"TransactionEffectiveDate").HasColumnType("datetime").IsOptional();
            Property(x => x.PeriodId).HasColumnName(@"PeriodId").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.AdhocPaymentInstruction).WithMany(b => b.Transactions).HasForeignKey(c => c.AdhocPaymentInstructionId).WillCascadeOnDelete(false); // FK_Transactions_AdhocPaymentInstructions
            HasOptional(a => a.BankStatementEntry).WithMany(b => b.Transactions).HasForeignKey(c => c.BankStatementEntryId).WillCascadeOnDelete(false); // FK_Transaction_BankStatementEntry
            HasOptional(a => a.ClaimRecoveryInvoice).WithMany(b => b.Transactions).HasForeignKey(c => c.ClaimRecoveryInvoiceId).WillCascadeOnDelete(false); // FK_Transactions_ClaimRecovery
            HasOptional(a => a.Invoice).WithMany(b => b.Transactions).HasForeignKey(c => c.InvoiceId).WillCascadeOnDelete(false); // FK_Transactions_Invoice
            HasOptional(a => a.LinkedTransaction).WithMany(b => b.Transactions).HasForeignKey(c => c.LinkedTransactionId).WillCascadeOnDelete(false); // FK_Transactions_Transactions
            HasRequired(a => a.TransactionTypeLink).WithMany(b => b.Transactions).HasForeignKey(c => c.TransactionTypeLinkId).WillCascadeOnDelete(false); // FK_Transactions_TransactionType
        }
    }

}
