


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//		
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// The following connection settings were used to generate this file:
//     Connection String:      "data source=azt-mcc-sql-01.rma.msft;initial catalog=AZD-MCC;user id=RMAAdmin;password=**zapped**;;MultipleActiveResultSets=True;App=EntityFramework"
// ------------------------------------------------------------------------------------------------
// Database Edition        : Developer Edition (64-bit)
// Database Engine Edition : Enterprise
// Database Version        : 14.0.3471.2

using Autofac;
using RMA.Common.Database.Repository;
using RMA.Common.Database.Contracts.Repository;
using RMA.Service.FinCare.Database.Entities;
using RMA.Service.FinCare.Database.Context;

namespace RMA.Service.FinCare.Database
{
	public class EfDbContextServiceRegistry : Module
	{
		protected override void Load(ContainerBuilder builder)
		{ 
			builder.RegisterType<EfDbContext>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_AbilityCollection, EfDbContext>>().As<IRepository<billing_AbilityCollection>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_AbilityCollectionsAudit, EfDbContext>>().As<IRepository<billing_AbilityCollectionsAudit>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_AbilityTransactionsAudit, EfDbContext>>().As<IRepository<billing_AbilityTransactionsAudit>>();
			builder.RegisterType<EfRepository<billing_AdhocPaymentInstruction, EfDbContext>>().As<IRepository<billing_AdhocPaymentInstruction>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_AdhocPaymentInstructionsTermArrangementSchedule, EfDbContext>>().As<IRepository<billing_AdhocPaymentInstructionsTermArrangementSchedule>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_AgeAnalysisAgent, EfDbContext>>().As<IRepository<billing_AgeAnalysisAgent>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_AgeAnalysisNote, EfDbContext>>().As<IRepository<billing_AgeAnalysisNote>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_AllocationLookup, EfDbContext>>().As<IRepository<billing_AllocationLookup>>();
			builder.RegisterType<EfRepository<billing_AuditLog, EfDbContext>>().As<IRepository<billing_AuditLog>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_AutoAllocationBankAccount, EfDbContext>>().As<IRepository<billing_AutoAllocationBankAccount>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_BatchInvoice, EfDbContext>>().As<IRepository<billing_BatchInvoice>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_BatchInvoiceDetail, EfDbContext>>().As<IRepository<billing_BatchInvoiceDetail>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_BundleRaiseDetail, EfDbContext>>().As<IRepository<billing_BundleRaiseDetail>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_BundleRaiseHeader, EfDbContext>>().As<IRepository<billing_BundleRaiseHeader>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_ClaimRecoveryInvoice, EfDbContext>>().As<IRepository<billing_ClaimRecoveryInvoice>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_Collection, EfDbContext>>().As<IRepository<billing_Collection>>();
			builder.RegisterType<EfRepository<billing_CollectionBatch, EfDbContext>>().As<IRepository<billing_CollectionBatch>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_CompanyBranch, EfDbContext>>().As<IRepository<billing_CompanyBranch>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_CompanyBranchBankAccount, EfDbContext>>().As<IRepository<billing_CompanyBranchBankAccount>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_CompanyBranchControl, EfDbContext>>().As<IRepository<billing_CompanyBranchControl>>();
			builder.RegisterType<EfRepository<billing_DebitTransactionAllocation, EfDbContext>>().As<IRepository<billing_DebitTransactionAllocation>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_DebtorStatusProductCategory, EfDbContext>>().As<IRepository<billing_DebtorStatusProductCategory>>();
			builder.RegisterType<EfRepository<billing_DebtorStatusRule, EfDbContext>>().As<IRepository<billing_DebtorStatusRule>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_EarnedPremium, EfDbContext>>().As<IRepository<billing_EarnedPremium>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_EmailedDocument, EfDbContext>>().As<IRepository<billing_EmailedDocument>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_ForecastRate, EfDbContext>>().As<IRepository<billing_ForecastRate>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_IndustryFinancialYear, EfDbContext>>().As<IRepository<billing_IndustryFinancialYear>>();
			builder.RegisterType<EfRepository<billing_InterBankTransfer, EfDbContext>>().As<IRepository<billing_InterBankTransfer>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_InterBankTransferDetail, EfDbContext>>().As<IRepository<billing_InterBankTransferDetail>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_InterBankTransferNote, EfDbContext>>().As<IRepository<billing_InterBankTransferNote>>();
			builder.RegisterType<EfRepository<billing_InterDebtorTransfer, EfDbContext>>().As<IRepository<billing_InterDebtorTransfer>>();
			builder.RegisterType<EfRepository<billing_InterDebtorTransferDetail, EfDbContext>>().As<IRepository<billing_InterDebtorTransferDetail>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_InterDebtorTransferNote, EfDbContext>>().As<IRepository<billing_InterDebtorTransferNote>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_Interest, EfDbContext>>().As<IRepository<billing_Interest>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_InterestIndicator, EfDbContext>>().As<IRepository<billing_InterestIndicator>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_Invoice, EfDbContext>>().As<IRepository<billing_Invoice>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_InvoiceAllocation, EfDbContext>>().As<IRepository<billing_InvoiceAllocation>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_InvoiceDetail, EfDbContext>>().As<IRepository<billing_InvoiceDetail>>();
			builder.RegisterType<EfRepository<billing_InvoicedItemType, EfDbContext>>().As<IRepository<billing_InvoicedItemType>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_InvoiceLineItem, EfDbContext>>().As<IRepository<billing_InvoiceLineItem>>();
			builder.RegisterType<EfRepository<billing_LastViewed, EfDbContext>>().As<IRepository<billing_LastViewed>>();
			builder.RegisterType<EfRepository<billing_LegalCommissionRecon, EfDbContext>>().As<IRepository<billing_LegalCommissionRecon>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_Note, EfDbContext>>().As<IRepository<billing_Note>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_PolicyPaymentAllocation, EfDbContext>>().As<IRepository<billing_PolicyPaymentAllocation>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_PremiumListingTransaction, EfDbContext>>().As<IRepository<billing_PremiumListingTransaction>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_PremiumTransactionPaymentFile, EfDbContext>>().As<IRepository<billing_PremiumTransactionPaymentFile>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_QLinkPaymentRecord, EfDbContext>>().As<IRepository<billing_QLinkPaymentRecord>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_RefundHeader, EfDbContext>>().As<IRepository<billing_RefundHeader>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_RefundHeaderDetail, EfDbContext>>().As<IRepository<billing_RefundHeaderDetail>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_RefundRoleLimit, EfDbContext>>().As<IRepository<billing_RefundRoleLimit>>();
			builder.RegisterType<EfRepository<billing_RmaBankAccount, EfDbContext>>().As<IRepository<billing_RmaBankAccount>>();
			builder.RegisterType<EfRepository<billing_SuspenseDebtorBankMapping, EfDbContext>>().As<IRepository<billing_SuspenseDebtorBankMapping>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_TermArrangement, EfDbContext>>().As<IRepository<billing_TermArrangement>>();
			builder.RegisterType<EfRepository<billing_TermArrangementProductOption, EfDbContext>>().As<IRepository<billing_TermArrangementProductOption>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_TermArrangementSchedule, EfDbContext>>().As<IRepository<billing_TermArrangementSchedule>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_TermBulkAllocation, EfDbContext>>().As<IRepository<billing_TermBulkAllocation>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_TermDebitOrderBankingDetail, EfDbContext>>().As<IRepository<billing_TermDebitOrderBankingDetail>>();
			builder.RegisterType<EfRepository<billing_TermDebitOrderRolePlayerBankingDetail, EfDbContext>>().As<IRepository<billing_TermDebitOrderRolePlayerBankingDetail>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_TermsArrangementNote, EfDbContext>>().As<IRepository<billing_TermsArrangementNote>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_TermScheduleAllocation, EfDbContext>>().As<IRepository<billing_TermScheduleAllocation>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_Transaction, EfDbContext>>().As<IRepository<billing_Transaction>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_TransactionsBck, EfDbContext>>().As<IRepository<billing_TransactionsBck>>();
			builder.RegisterType<EfRepository<billing_TransactionTypeLink, EfDbContext>>().As<IRepository<billing_TransactionTypeLink>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_UnallocatedPayment, EfDbContext>>().As<IRepository<billing_UnallocatedPayment>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_UnmetPayment, EfDbContext>>().As<IRepository<billing_UnmetPayment>>();
			builder.RegisterType<EfRepository<billing_UnpaidCodeDescription, EfDbContext>>().As<IRepository<billing_UnpaidCodeDescription>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<commission_ClawBackAccount, EfDbContext>>().As<IRepository<commission_ClawBackAccount>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<commission_ClawBackAccountMovement, EfDbContext>>().As<IRepository<commission_ClawBackAccountMovement>>();
			builder.RegisterType<EfRepository<commission_ClawedBackComm, EfDbContext>>().As<IRepository<commission_ClawedBackComm>>();
			builder.RegisterType<EfRepository<commission_Commhistory, EfDbContext>>().As<IRepository<commission_Commhistory>>();
			builder.RegisterType<EfRepository<commission_CommisionPaymentBatch, EfDbContext>>().As<IRepository<commission_CommisionPaymentBatch>>();
			builder.RegisterType<EfRepository<commission_CommissionConfig, EfDbContext>>().As<IRepository<commission_CommissionConfig>>();
			builder.RegisterType<EfRepository<commission_CommissionPaymentHistory, EfDbContext>>().As<IRepository<commission_CommissionPaymentHistory>>();
			builder.RegisterType<EfRepository<commission_CommissionType, EfDbContext>>().As<IRepository<commission_CommissionType>>();
			builder.RegisterType<EfRepository<commission_CommSchedule, EfDbContext>>().As<IRepository<commission_CommSchedule>>();
			builder.RegisterType<EfRepository<commission_CommValidation, EfDbContext>>().As<IRepository<commission_CommValidation>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<commission_Detail, EfDbContext>>().As<IRepository<commission_Detail>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<commission_Header, EfDbContext>>().As<IRepository<commission_Header>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<commission_InvoicePaymentAllocation, EfDbContext>>().As<IRepository<commission_InvoicePaymentAllocation>>();
			builder.RegisterType<EfRepository<commission_PaymentBatch, EfDbContext>>().As<IRepository<commission_PaymentBatch>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<commission_PaymentInstruction, EfDbContext>>().As<IRepository<commission_PaymentInstruction>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<commission_Period, EfDbContext>>().As<IRepository<commission_Period>>();
			builder.RegisterType<EfRepository<commission_PolicyCommission, EfDbContext>>().As<IRepository<commission_PolicyCommission>>();
			builder.RegisterType<EfRepository<commission_PolicyImport, EfDbContext>>().As<IRepository<commission_PolicyImport>>();
			builder.RegisterType<EfRepository<commission_PolicyImportError, EfDbContext>>().As<IRepository<commission_PolicyImportError>>();
			builder.RegisterType<EfRepository<commission_PolicyStatu, EfDbContext>>().As<IRepository<commission_PolicyStatu>>();
			builder.RegisterType<EfRepository<commission_RetainedComm, EfDbContext>>().As<IRepository<commission_RetainedComm>>();
			builder.RegisterType<EfRepository<commission_UpFrontCommissionCalc, EfDbContext>>().As<IRepository<commission_UpFrontCommissionCalc>>();
			builder.RegisterType<EfRepository<commission_ValidationType, EfDbContext>>().As<IRepository<commission_ValidationType>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<finance_AbilityPosting, EfDbContext>>().As<IRepository<finance_AbilityPosting>>();
			builder.RegisterType<EfRepository<finance_AbilityPosting2, EfDbContext>>().As<IRepository<finance_AbilityPosting2>>();
			builder.RegisterType<EfRepository<finance_AbilityPosting3, EfDbContext>>().As<IRepository<finance_AbilityPosting3>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<finance_AbilityPostingAudit, EfDbContext>>().As<IRepository<finance_AbilityPostingAudit>>();
			builder.RegisterType<EfRepository<finance_BankAccountVerification, EfDbContext>>().As<IRepository<finance_BankAccountVerification>>();
			builder.RegisterType<EfRepository<finance_BankAccountVerificationRequest, EfDbContext>>().As<IRepository<finance_BankAccountVerificationRequest>>();
			builder.RegisterType<EfRepository<finance_BankStatement, EfDbContext>>().As<IRepository<finance_BankStatement>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<finance_BankStatementEntry, EfDbContext>>().As<IRepository<finance_BankStatementEntry>>();
			builder.RegisterType<EfRepository<finance_DiscountReport, EfDbContext>>().As<IRepository<finance_DiscountReport>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<finance_ProductCrossRefBankAccount, EfDbContext>>().As<IRepository<finance_ProductCrossRefBankAccount>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<finance_ProductCrossRefTranType, EfDbContext>>().As<IRepository<finance_ProductCrossRefTranType>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<finance_ProductCrossRefTranTypeTemp, EfDbContext>>().As<IRepository<finance_ProductCrossRefTranTypeTemp>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<finance_RecoveryReceipt, EfDbContext>>().As<IRepository<finance_RecoveryReceipt>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<finance_RecoveryReceiptAllocation, EfDbContext>>().As<IRepository<finance_RecoveryReceiptAllocation>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<finance_RecoveryReceiptDeduction, EfDbContext>>().As<IRepository<finance_RecoveryReceiptDeduction>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<finance_RefundHeader, EfDbContext>>().As<IRepository<finance_RefundHeader>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<finance_RefundHeaderDetail, EfDbContext>>().As<IRepository<finance_RefundHeaderDetail>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<Load_BankStatementEntryStaging, EfDbContext>>().As<IRepository<Load_BankStatementEntryStaging>>();
			builder.RegisterType<EfRepository<Load_Benefit, EfDbContext>>().As<IRepository<Load_Benefit>>();
			builder.RegisterType<EfRepository<Load_BenefitsUploadErrorAudit, EfDbContext>>().As<IRepository<Load_BenefitsUploadErrorAudit>>();
			builder.RegisterType<EfRepository<Load_BestmedMedicalAidData, EfDbContext>>().As<IRepository<Load_BestmedMedicalAidData>>();
			builder.RegisterType<EfRepository<Load_BulkAllocationFile, EfDbContext>>().As<IRepository<Load_BulkAllocationFile>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<Load_BulkManualAllocation, EfDbContext>>().As<IRepository<Load_BulkManualAllocation>>();
			builder.RegisterType<EfRepository<Load_BulkPaymentListing, EfDbContext>>().As<IRepository<Load_BulkPaymentListing>>();
			builder.RegisterType<EfRepository<Load_CdaPolicyScheduleEmailQueue, EfDbContext>>().As<IRepository<Load_CdaPolicyScheduleEmailQueue>>();
			builder.RegisterType<EfRepository<Load_ClientClass13Rates, EfDbContext>>().As<IRepository<Load_ClientClass13Rates>>();
			builder.RegisterType<EfRepository<Load_ClientClass4Rates, EfDbContext>>().As<IRepository<Load_ClientClass4Rates>>();
			builder.RegisterType<EfRepository<Load_ConsolidatedFuneral, EfDbContext>>().As<IRepository<Load_ConsolidatedFuneral>>();
			builder.RegisterType<EfRepository<Load_ConsolidatedFuneralBank, EfDbContext>>().As<IRepository<Load_ConsolidatedFuneralBank>>();
			builder.RegisterType<EfRepository<Load_ConsolidatedFuneralBenefit, EfDbContext>>().As<IRepository<Load_ConsolidatedFuneralBenefit>>();
			builder.RegisterType<EfRepository<Load_ConsolidatedFuneralDeduction, EfDbContext>>().As<IRepository<Load_ConsolidatedFuneralDeduction>>();
			builder.RegisterType<EfRepository<Load_ConsolidatedFuneralError, EfDbContext>>().As<IRepository<Load_ConsolidatedFuneralError>>();
			builder.RegisterType<EfRepository<Load_ConsolidatedFuneralFile, EfDbContext>>().As<IRepository<Load_ConsolidatedFuneralFile>>();
			builder.RegisterType<EfRepository<Load_ConsolidatedFuneralInsurance, EfDbContext>>().As<IRepository<Load_ConsolidatedFuneralInsurance>>();
			builder.RegisterType<EfRepository<Load_ConsolidatedFuneralMember, EfDbContext>>().As<IRepository<Load_ConsolidatedFuneralMember>>();
			builder.RegisterType<EfRepository<Load_DiscountFile, EfDbContext>>().As<IRepository<Load_DiscountFile>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<Load_DiscountFileAudit, EfDbContext>>().As<IRepository<Load_DiscountFileAudit>>();
			builder.RegisterType<EfRepository<Load_DiscountFileListing, EfDbContext>>().As<IRepository<Load_DiscountFileListing>>();
			builder.RegisterType<EfRepository<Load_ExternalPartnerPolicyData, EfDbContext>>().As<IRepository<Load_ExternalPartnerPolicyData>>();
			builder.RegisterType<EfRepository<Load_FuneralPremium, EfDbContext>>().As<IRepository<Load_FuneralPremium>>();
			builder.RegisterType<EfRepository<Load_Gpa, EfDbContext>>().As<IRepository<Load_Gpa>>();
			builder.RegisterType<EfRepository<Load_GpaFile, EfDbContext>>().As<IRepository<Load_GpaFile>>();
			builder.RegisterType<EfRepository<Load_GpaMember, EfDbContext>>().As<IRepository<Load_GpaMember>>();
			builder.RegisterType<EfRepository<Load_GroupPolicyScheduleBatch, EfDbContext>>().As<IRepository<Load_GroupPolicyScheduleBatch>>();
			builder.RegisterType<EfRepository<Load_IndustryRate, EfDbContext>>().As<IRepository<Load_IndustryRate>>();
			builder.RegisterType<EfRepository<Load_InsuredLife, EfDbContext>>().As<IRepository<Load_InsuredLife>>();
			builder.RegisterType<EfRepository<Load_InsuredLivesBenefit, EfDbContext>>().As<IRepository<Load_InsuredLivesBenefit>>();
			builder.RegisterType<EfRepository<Load_InsuredLivesCompany, EfDbContext>>().As<IRepository<Load_InsuredLivesCompany>>();
			builder.RegisterType<EfRepository<Load_InsuredLivesError, EfDbContext>>().As<IRepository<Load_InsuredLivesError>>();
			builder.RegisterType<EfRepository<Load_InsuredLivesMember, EfDbContext>>().As<IRepository<Load_InsuredLivesMember>>();
			builder.RegisterType<EfRepository<Load_InsuredLivesMessage, EfDbContext>>().As<IRepository<Load_InsuredLivesMessage>>();
			builder.RegisterType<EfRepository<Load_Lead, EfDbContext>>().As<IRepository<Load_Lead>>();
			builder.RegisterType<EfRepository<Load_LeadsProduct, EfDbContext>>().As<IRepository<Load_LeadsProduct>>();
			builder.RegisterType<EfRepository<Load_LeadsProductWizard, EfDbContext>>().As<IRepository<Load_LeadsProductWizard>>();
			builder.RegisterType<EfRepository<Load_LeadsUploadErrorAudit, EfDbContext>>().As<IRepository<Load_LeadsUploadErrorAudit>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<Load_LeadTimeTracker, EfDbContext>>().As<IRepository<Load_LeadTimeTracker>>();
			builder.RegisterType<EfRepository<Load_LegalHandOverFile, EfDbContext>>().As<IRepository<Load_LegalHandOverFile>>();
			builder.RegisterType<EfRepository<Load_LegalHandOverFileDetail, EfDbContext>>().As<IRepository<Load_LegalHandOverFileDetail>>();
			builder.RegisterType<EfRepository<Load_MemberCancel, EfDbContext>>().As<IRepository<Load_MemberCancel>>();
			builder.RegisterType<EfRepository<Load_MyValuePlu, EfDbContext>>().As<IRepository<Load_MyValuePlu>>();
			builder.RegisterType<EfRepository<Load_MyValuePlusBank, EfDbContext>>().As<IRepository<Load_MyValuePlusBank>>();
			builder.RegisterType<EfRepository<Load_MyValuePlusBenefit, EfDbContext>>().As<IRepository<Load_MyValuePlusBenefit>>();
			builder.RegisterType<EfRepository<Load_MyValuePlusDeduction, EfDbContext>>().As<IRepository<Load_MyValuePlusDeduction>>();
			builder.RegisterType<EfRepository<Load_MyValuePlusError, EfDbContext>>().As<IRepository<Load_MyValuePlusError>>();
			builder.RegisterType<EfRepository<Load_MyValuePlusFile, EfDbContext>>().As<IRepository<Load_MyValuePlusFile>>();
			builder.RegisterType<EfRepository<Load_MyValuePlusInsurance, EfDbContext>>().As<IRepository<Load_MyValuePlusInsurance>>();
			builder.RegisterType<EfRepository<Load_MyValuePlusMember, EfDbContext>>().As<IRepository<Load_MyValuePlusMember>>();
			builder.RegisterType<EfRepository<Load_PaymentStaging, EfDbContext>>().As<IRepository<Load_PaymentStaging>>();
			builder.RegisterType<EfRepository<Load_PaymentStagingFile, EfDbContext>>().As<IRepository<Load_PaymentStagingFile>>();
			builder.RegisterType<EfRepository<Load_PostRetirementMedicalAidData, EfDbContext>>().As<IRepository<Load_PostRetirementMedicalAidData>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<Load_PostRetirementMedicalAidInvoiceDetail, EfDbContext>>().As<IRepository<Load_PostRetirementMedicalAidInvoiceDetail>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<Load_PostRetirementMedicalAidInvoiceHeader, EfDbContext>>().As<IRepository<Load_PostRetirementMedicalAidInvoiceHeader>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<Load_PostRetirementMedicalAnnuityData, EfDbContext>>().As<IRepository<Load_PostRetirementMedicalAnnuityData>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<Load_PostRetirementMedicalAnnuityLatestData, EfDbContext>>().As<IRepository<Load_PostRetirementMedicalAnnuityLatestData>>();
			builder.RegisterType<EfRepository<Load_PremiumListing, EfDbContext>>().As<IRepository<Load_PremiumListing>>();
			builder.RegisterType<EfRepository<Load_PremiumListingBenefit, EfDbContext>>().As<IRepository<Load_PremiumListingBenefit>>();
			builder.RegisterType<EfRepository<Load_PremiumListingCompany, EfDbContext>>().As<IRepository<Load_PremiumListingCompany>>();
			builder.RegisterType<EfRepository<Load_PremiumListingError, EfDbContext>>().As<IRepository<Load_PremiumListingError>>();
			builder.RegisterType<EfRepository<Load_PremiumListingFile, EfDbContext>>().As<IRepository<Load_PremiumListingFile>>();
			builder.RegisterType<EfRepository<Load_PremiumListingMember, EfDbContext>>().As<IRepository<Load_PremiumListingMember>>();
			builder.RegisterType<EfRepository<Load_PremiumListingMessage, EfDbContext>>().As<IRepository<Load_PremiumListingMessage>>();
			builder.RegisterType<EfRepository<Load_PremiumListingPayment, EfDbContext>>().As<IRepository<Load_PremiumListingPayment>>();
			builder.RegisterType<EfRepository<Load_PremiumListingPaymentError, EfDbContext>>().As<IRepository<Load_PremiumListingPaymentError>>();
			builder.RegisterType<EfRepository<Load_PremiumListingPaymentFile, EfDbContext>>().As<IRepository<Load_PremiumListingPaymentFile>>();
			builder.RegisterType<EfRepository<Load_PremiumListingPolicyPremiumMovement, EfDbContext>>().As<IRepository<Load_PremiumListingPolicyPremiumMovement>>();
			builder.RegisterType<EfRepository<Load_PremiumPaymentDueCreditNote, EfDbContext>>().As<IRepository<Load_PremiumPaymentDueCreditNote>>();
			builder.RegisterType<EfRepository<Load_PremiumPaymentFileValidation, EfDbContext>>().As<IRepository<Load_PremiumPaymentFileValidation>>();
			builder.RegisterType<EfRepository<Load_PremiumPaymentFileValidationContent, EfDbContext>>().As<IRepository<Load_PremiumPaymentFileValidationContent>>();
			builder.RegisterType<EfRepository<Load_PremiumWriteOffContent, EfDbContext>>().As<IRepository<Load_PremiumWriteOffContent>>();
			builder.RegisterType<EfRepository<Load_PremiumWriteOffFile, EfDbContext>>().As<IRepository<Load_PremiumWriteOffFile>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<Load_QLinkPaymentRecordStaging, EfDbContext>>().As<IRepository<Load_QLinkPaymentRecordStaging>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<Load_Rate, EfDbContext>>().As<IRepository<Load_Rate>>();
			builder.RegisterType<EfRepository<Load_RatesUploadErrorAudit, EfDbContext>>().As<IRepository<Load_RatesUploadErrorAudit>>();
			builder.RegisterType<EfRepository<Load_StageGroupRisk, EfDbContext>>().As<IRepository<Load_StageGroupRisk>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<Load_StageGroupRiskError, EfDbContext>>().As<IRepository<Load_StageGroupRiskError>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<Load_StagePolicyIntegrationRequest, EfDbContext>>().As<IRepository<Load_StagePolicyIntegrationRequest>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<Load_StagePostRetirementMedicalAid, EfDbContext>>().As<IRepository<Load_StagePostRetirementMedicalAid>>();
			builder.RegisterType<EfRepository<Load_StagePostRetirementMedicalAnnuity, EfDbContext>>().As<IRepository<Load_StagePostRetirementMedicalAnnuity>>();
			builder.RegisterType<EfRepository<Load_ThirdPartyPolicyListing, EfDbContext>>().As<IRepository<Load_ThirdPartyPolicyListing>>();
			builder.RegisterType<EfRepository<Load_ThirdPartyPolicyListingError, EfDbContext>>().As<IRepository<Load_ThirdPartyPolicyListingError>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<payment_Allocation, EfDbContext>>().As<IRepository<payment_Allocation>>();
			builder.RegisterType<EfRepository<payment_AuditLog, EfDbContext>>().As<IRepository<payment_AuditLog>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<payment_EuropeAssistPayment, EfDbContext>>().As<IRepository<payment_EuropeAssistPayment>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<payment_FacsTransactionResult, EfDbContext>>().As<IRepository<payment_FacsTransactionResult>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<payment_FinancialPeriod, EfDbContext>>().As<IRepository<payment_FinancialPeriod>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<payment_GroupCompany, EfDbContext>>().As<IRepository<payment_GroupCompany>>();
			builder.RegisterType<EfRepository<payment_LastViewed, EfDbContext>>().As<IRepository<payment_LastViewed>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<payment_ManageFinanceUser, EfDbContext>>().As<IRepository<payment_ManageFinanceUser>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<payment_Note, EfDbContext>>().As<IRepository<payment_Note>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<payment_Payment, EfDbContext>>().As<IRepository<payment_Payment>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<payment_PaymentAccount, EfDbContext>>().As<IRepository<payment_PaymentAccount>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<payment_PaymentErrorAudit, EfDbContext>>().As<IRepository<payment_PaymentErrorAudit>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<payment_PaymentPensionReject, EfDbContext>>().As<IRepository<payment_PaymentPensionReject>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<payment_PaymentRejectionCode, EfDbContext>>().As<IRepository<payment_PaymentRejectionCode>>();
			builder.RegisterType<EfRepository<payment_PaymentSubmissionBatch, EfDbContext>>().As<IRepository<payment_PaymentSubmissionBatch>>();
			builder.RegisterType<EfRepository<payment_ProductCrossRefTranType, EfDbContext>>().As<IRepository<payment_ProductCrossRefTranType>>();
  
		}
	}
}
