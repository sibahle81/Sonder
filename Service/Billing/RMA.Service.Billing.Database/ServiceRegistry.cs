


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//		
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// The following connection settings were used to generate this file:
//     Connection String:      "data source=azt-mcc-sql-01.rma.msft;initial catalog=AZD-MCC;user id=RMAAdmin;password=**zapped**;;MultipleActiveResultSets=True;App=EntityFramework"
// ------------------------------------------------------------------------------------------------
// Database Edition        : Developer Edition (64-bit)
// Database Engine Edition : Enterprise
// Database Version        : 14.0.3471.2

using Autofac;
using RMA.Common.Database.Repository; 
using RMA.Common.Database.Contracts.Repository;       
using RMA.Service.Billing.Database.Entities;
using RMA.Service.Billing.Database.Context;

namespace RMA.Service.Billing.Database
{
	public class EfDbContextServiceRegistry : Module
	{
		protected override void Load(ContainerBuilder builder)
		{ 
			builder.RegisterType<EfDbContext>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_AbilityCollection, EfDbContext>>().As<IRepository<billing_AbilityCollection>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_AbilityCollectionsAudit, EfDbContext>>().As<IRepository<billing_AbilityCollectionsAudit>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_AbilityTransactionsAudit, EfDbContext>>().As<IRepository<billing_AbilityTransactionsAudit>>();
			builder.RegisterType<EfRepository<billing_AdhocPaymentInstruction, EfDbContext>>().As<IRepository<billing_AdhocPaymentInstruction>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_AdhocPaymentInstructionsTermArrangementSchedule, EfDbContext>>().As<IRepository<billing_AdhocPaymentInstructionsTermArrangementSchedule>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_AgeAnalysisAgent, EfDbContext>>().As<IRepository<billing_AgeAnalysisAgent>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_AgeAnalysisNote, EfDbContext>>().As<IRepository<billing_AgeAnalysisNote>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_AllocationLookup, EfDbContext>>().As<IRepository<billing_AllocationLookup>>();
			builder.RegisterType<EfRepository<billing_AuditLog, EfDbContext>>().As<IRepository<billing_AuditLog>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_AutoAllocationBankAccount, EfDbContext>>().As<IRepository<billing_AutoAllocationBankAccount>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_BatchInvoice, EfDbContext>>().As<IRepository<billing_BatchInvoice>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_BatchInvoiceDetail, EfDbContext>>().As<IRepository<billing_BatchInvoiceDetail>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_BundleRaiseDetail, EfDbContext>>().As<IRepository<billing_BundleRaiseDetail>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_BundleRaiseHeader, EfDbContext>>().As<IRepository<billing_BundleRaiseHeader>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_ClaimRecoveryInvoice, EfDbContext>>().As<IRepository<billing_ClaimRecoveryInvoice>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_Collection, EfDbContext>>().As<IRepository<billing_Collection>>();
			builder.RegisterType<EfRepository<billing_CollectionBatch, EfDbContext>>().As<IRepository<billing_CollectionBatch>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_CompanyBranch, EfDbContext>>().As<IRepository<billing_CompanyBranch>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_CompanyBranchBankAccount, EfDbContext>>().As<IRepository<billing_CompanyBranchBankAccount>>();
			builder.RegisterType<EfRepository<billing_DebitTransactionAllocation, EfDbContext>>().As<IRepository<billing_DebitTransactionAllocation>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_DebtorStatusProductCategory, EfDbContext>>().As<IRepository<billing_DebtorStatusProductCategory>>();
			builder.RegisterType<EfRepository<billing_DebtorStatusRule, EfDbContext>>().As<IRepository<billing_DebtorStatusRule>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_EarnedPremium, EfDbContext>>().As<IRepository<billing_EarnedPremium>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_EmailedDocument, EfDbContext>>().As<IRepository<billing_EmailedDocument>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_ForecastRate, EfDbContext>>().As<IRepository<billing_ForecastRate>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_IndustryFinancialYear, EfDbContext>>().As<IRepository<billing_IndustryFinancialYear>>();
			builder.RegisterType<EfRepository<billing_InterBankTransfer, EfDbContext>>().As<IRepository<billing_InterBankTransfer>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_InterBankTransferDetail, EfDbContext>>().As<IRepository<billing_InterBankTransferDetail>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_InterBankTransferNote, EfDbContext>>().As<IRepository<billing_InterBankTransferNote>>();
			builder.RegisterType<EfRepository<billing_InterDebtorTransfer, EfDbContext>>().As<IRepository<billing_InterDebtorTransfer>>();
			builder.RegisterType<EfRepository<billing_InterDebtorTransferDetail, EfDbContext>>().As<IRepository<billing_InterDebtorTransferDetail>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_InterDebtorTransferNote, EfDbContext>>().As<IRepository<billing_InterDebtorTransferNote>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_Interest, EfDbContext>>().As<IRepository<billing_Interest>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_InterestIndicator, EfDbContext>>().As<IRepository<billing_InterestIndicator>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_Invoice, EfDbContext>>().As<IRepository<billing_Invoice>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_InvoiceAllocation, EfDbContext>>().As<IRepository<billing_InvoiceAllocation>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_InvoiceDetail, EfDbContext>>().As<IRepository<billing_InvoiceDetail>>();
			builder.RegisterType<EfRepository<billing_InvoicedItemType, EfDbContext>>().As<IRepository<billing_InvoicedItemType>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_InvoiceLineItem, EfDbContext>>().As<IRepository<billing_InvoiceLineItem>>();
			builder.RegisterType<EfRepository<billing_LastViewed, EfDbContext>>().As<IRepository<billing_LastViewed>>();
			builder.RegisterType<EfRepository<billing_LegalCommissionRecon, EfDbContext>>().As<IRepository<billing_LegalCommissionRecon>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_Note, EfDbContext>>().As<IRepository<billing_Note>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_PolicyPaymentAllocation, EfDbContext>>().As<IRepository<billing_PolicyPaymentAllocation>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_PremiumListingTransaction, EfDbContext>>().As<IRepository<billing_PremiumListingTransaction>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_PremiumTransactionPaymentFile, EfDbContext>>().As<IRepository<billing_PremiumTransactionPaymentFile>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_QLinkPaymentRecord, EfDbContext>>().As<IRepository<billing_QLinkPaymentRecord>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_RefundHeader, EfDbContext>>().As<IRepository<billing_RefundHeader>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_RefundHeaderDetail, EfDbContext>>().As<IRepository<billing_RefundHeaderDetail>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_RefundRoleLimit, EfDbContext>>().As<IRepository<billing_RefundRoleLimit>>();
			builder.RegisterType<EfRepository<billing_RmaBankAccount, EfDbContext>>().As<IRepository<billing_RmaBankAccount>>();
			builder.RegisterType<EfRepository<billing_SuspenseDebtorBankMapping, EfDbContext>>().As<IRepository<billing_SuspenseDebtorBankMapping>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_TermArrangement, EfDbContext>>().As<IRepository<billing_TermArrangement>>();
			builder.RegisterType<EfRepository<billing_TermArrangementProductOption, EfDbContext>>().As<IRepository<billing_TermArrangementProductOption>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_TermArrangementSchedule, EfDbContext>>().As<IRepository<billing_TermArrangementSchedule>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_TermBulkAllocation, EfDbContext>>().As<IRepository<billing_TermBulkAllocation>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_TermDebitOrderBankingDetail, EfDbContext>>().As<IRepository<billing_TermDebitOrderBankingDetail>>();
			builder.RegisterType<EfRepository<billing_TermDebitOrderRolePlayerBankingDetail, EfDbContext>>().As<IRepository<billing_TermDebitOrderRolePlayerBankingDetail>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_TermsArrangementNote, EfDbContext>>().As<IRepository<billing_TermsArrangementNote>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_TermScheduleAllocation, EfDbContext>>().As<IRepository<billing_TermScheduleAllocation>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_Transaction, EfDbContext>>().As<IRepository<billing_Transaction>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_TransactionsBck, EfDbContext>>().As<IRepository<billing_TransactionsBck>>();
			builder.RegisterType<EfRepository<billing_TransactionTypeLink, EfDbContext>>().As<IRepository<billing_TransactionTypeLink>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_UnallocatedPayment, EfDbContext>>().As<IRepository<billing_UnallocatedPayment>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<billing_UnmetPayment, EfDbContext>>().As<IRepository<billing_UnmetPayment>>();
			builder.RegisterType<EfRepository<billing_UnpaidCodeDescription, EfDbContext>>().As<IRepository<billing_UnpaidCodeDescription>>();
			builder.RegisterType<EfRepository<client_AuditLog, EfDbContext>>().As<IRepository<client_AuditLog>>();
			builder.RegisterType<EfRepository<client_BankingPurpose, EfDbContext>>().As<IRepository<client_BankingPurpose>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<client_BodyCollector, EfDbContext>>().As<IRepository<client_BodyCollector>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<client_Company, EfDbContext>>().As<IRepository<client_Company>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<client_CompanyPremis, EfDbContext>>().As<IRepository<client_CompanyPremis>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<client_Declaration, EfDbContext>>().As<IRepository<client_Declaration>>();
			builder.RegisterType<EfRepository<client_DeclarationAllowance, EfDbContext>>().As<IRepository<client_DeclarationAllowance>>();
			builder.RegisterType<EfRepository<client_DeclarationBillingIntegration, EfDbContext>>().As<IRepository<client_DeclarationBillingIntegration>>();
			builder.RegisterType<EfRepository<client_DeclarationPenaltyPercentage, EfDbContext>>().As<IRepository<client_DeclarationPenaltyPercentage>>();
			builder.RegisterType<EfRepository<client_Doctor, EfDbContext>>().As<IRepository<client_Doctor>>();
			builder.RegisterType<EfRepository<client_Employment, EfDbContext>>().As<IRepository<client_Employment>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<client_FinPayee, EfDbContext>>().As<IRepository<client_FinPayee>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<client_FuneralParlor, EfDbContext>>().As<IRepository<client_FuneralParlor>>();
			builder.RegisterType<EfRepository<client_IndustryClassDeclarationConfiguration, EfDbContext>>().As<IRepository<client_IndustryClassDeclarationConfiguration>>();
			builder.RegisterType<EfRepository<client_IndustryClassRenewal, EfDbContext>>().As<IRepository<client_IndustryClassRenewal>>();
			builder.RegisterType<EfRepository<client_InflationPercentage, EfDbContext>>().As<IRepository<client_InflationPercentage>>();
			builder.RegisterType<EfRepository<client_LastViewed, EfDbContext>>().As<IRepository<client_LastViewed>>();
			builder.RegisterType<EfRepository<client_LetterOfGoodStanding, EfDbContext>>().As<IRepository<client_LetterOfGoodStanding>>();
			builder.RegisterType<EfRepository<client_LiveInAllowance, EfDbContext>>().As<IRepository<client_LiveInAllowance>>();
			builder.RegisterType<EfRepository<client_MaxAverageEarning, EfDbContext>>().As<IRepository<client_MaxAverageEarning>>();
			builder.RegisterType<EfRepository<client_MinimumAllowablePremium, EfDbContext>>().As<IRepository<client_MinimumAllowablePremium>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<client_OrganisationOptionItemValue, EfDbContext>>().As<IRepository<client_OrganisationOptionItemValue>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<client_PersalCutOffDate, EfDbContext>>().As<IRepository<client_PersalCutOffDate>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<client_Person, EfDbContext>>().As<IRepository<client_Person>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<client_PersonEmployment, EfDbContext>>().As<IRepository<client_PersonEmployment>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<client_PersonTemp, EfDbContext>>().As<IRepository<client_PersonTemp>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<client_PolicyContactOverride, EfDbContext>>().As<IRepository<client_PolicyContactOverride>>();
			builder.RegisterType<EfRepository<client_PreviousInsurerRolePlayer, EfDbContext>>().As<IRepository<client_PreviousInsurerRolePlayer>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<client_QlinkReservationTransaction, EfDbContext>>().As<IRepository<client_QlinkReservationTransaction>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<client_QlinkTransaction, EfDbContext>>().As<IRepository<client_QlinkTransaction>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<client_Rate, EfDbContext>>().As<IRepository<client_Rate>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<client_Reinsurer, EfDbContext>>().As<IRepository<client_Reinsurer>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<client_RolePlayer, EfDbContext>>().As<IRepository<client_RolePlayer>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<client_RolePlayerAddress, EfDbContext>>().As<IRepository<client_RolePlayerAddress>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<client_RolePlayerBankingDetail, EfDbContext>>().As<IRepository<client_RolePlayerBankingDetail>>();
			builder.RegisterType<EfRepository<client_RolePlayerContact, EfDbContext>>().As<IRepository<client_RolePlayerContact>>();
			builder.RegisterType<EfRepository<client_RolePlayerContactInformation, EfDbContext>>().As<IRepository<client_RolePlayerContactInformation>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<client_RolePlayerMedicalAidDetail, EfDbContext>>().As<IRepository<client_RolePlayerMedicalAidDetail>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<client_RolePlayerNote, EfDbContext>>().As<IRepository<client_RolePlayerNote>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<client_RolePlayerPersalDetail, EfDbContext>>().As<IRepository<client_RolePlayerPersalDetail>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<client_RolePlayerPolicyDeclaration, EfDbContext>>().As<IRepository<client_RolePlayerPolicyDeclaration>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<client_RolePlayerPolicyDeclarationDetail, EfDbContext>>().As<IRepository<client_RolePlayerPolicyDeclarationDetail>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<client_RolePlayerPolicyOnlineSubmission, EfDbContext>>().As<IRepository<client_RolePlayerPolicyOnlineSubmission>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<client_RolePlayerPolicyOnlineSubmissionDetail, EfDbContext>>().As<IRepository<client_RolePlayerPolicyOnlineSubmissionDetail>>();
			builder.RegisterType<EfRepository<client_RolePlayerPolicyTransaction, EfDbContext>>().As<IRepository<client_RolePlayerPolicyTransaction>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<client_RolePlayerPolicyTransactionDetail, EfDbContext>>().As<IRepository<client_RolePlayerPolicyTransactionDetail>>();
			builder.RegisterType<EfRepository<client_RolePlayerRelation, EfDbContext>>().As<IRepository<client_RolePlayerRelation>>();
			builder.RegisterType<EfRepository<client_RolePlayerRelationLife, EfDbContext>>().As<IRepository<client_RolePlayerRelationLife>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<client_RolePlayerRetirement, EfDbContext>>().As<IRepository<client_RolePlayerRetirement>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<client_RolePlayerTemp, EfDbContext>>().As<IRepository<client_RolePlayerTemp>>();
			builder.RegisterType<EfRepository<client_RolePlayerType, EfDbContext>>().As<IRepository<client_RolePlayerType>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<client_SchemeClassification, EfDbContext>>().As<IRepository<client_SchemeClassification>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<client_SchemeFulfilmentTemplate, EfDbContext>>().As<IRepository<client_SchemeFulfilmentTemplate>>();
			builder.RegisterType<EfRepository<client_StillBorn, EfDbContext>>().As<IRepository<client_StillBorn>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<client_StopOrderCompany, EfDbContext>>().As<IRepository<client_StopOrderCompany>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<client_StopOrderDate, EfDbContext>>().As<IRepository<client_StopOrderDate>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<client_Undertaker, EfDbContext>>().As<IRepository<client_Undertaker>>();
			builder.RegisterType<EfRepository<client_UserVopdResponse, EfDbContext>>().As<IRepository<client_UserVopdResponse>>();
			builder.RegisterType<EfRepository<client_VopdResponse, EfDbContext>>().As<IRepository<client_VopdResponse>>();
			builder.RegisterType<EfRepository<common_AccidentType, EfDbContext>>().As<IRepository<common_AccidentType>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<common_Announcement, EfDbContext>>().As<IRepository<common_Announcement>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<common_AnnouncementRole, EfDbContext>>().As<IRepository<common_AnnouncementRole>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<common_AnnouncementUserAcceptance, EfDbContext>>().As<IRepository<common_AnnouncementUserAcceptance>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<common_AuthorityLimitConfiguration, EfDbContext>>().As<IRepository<common_AuthorityLimitConfiguration>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<common_AuthorityLimitConfigurationUserAudit, EfDbContext>>().As<IRepository<common_AuthorityLimitConfigurationUserAudit>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<common_ClaimTypeMapping, EfDbContext>>().As<IRepository<common_ClaimTypeMapping>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<common_CommissionBand, EfDbContext>>().As<IRepository<common_CommissionBand>>();
			builder.RegisterType<EfRepository<common_DepartmentLookup, EfDbContext>>().As<IRepository<common_DepartmentLookup>>();
			builder.RegisterType<EfRepository<common_DesignationType, EfDbContext>>().As<IRepository<common_DesignationType>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<common_ErrorType, EfDbContext>>().As<IRepository<common_ErrorType>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<common_EuropAssistPremiumMatrix, EfDbContext>>().As<IRepository<common_EuropAssistPremiumMatrix>>();
			builder.RegisterType<EfRepository<common_EventAction, EfDbContext>>().As<IRepository<common_EventAction>>();
			builder.RegisterType<EfRepository<common_EventActivity, EfDbContext>>().As<IRepository<common_EventActivity>>();
			builder.RegisterType<EfRepository<common_EventAgent, EfDbContext>>().As<IRepository<common_EventAgent>>();
			builder.RegisterType<EfRepository<common_ExcelToDatabaseMap, EfDbContext>>().As<IRepository<common_ExcelToDatabaseMap>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<common_FeatureFlagSetting, EfDbContext>>().As<IRepository<common_FeatureFlagSetting>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<common_FuneralInsuredType, EfDbContext>>().As<IRepository<common_FuneralInsuredType>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<common_GroupCompanyBck, EfDbContext>>().As<IRepository<common_GroupCompanyBck>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<common_LookupValue, EfDbContext>>().As<IRepository<common_LookupValue>>();
			builder.RegisterType<EfRepository<common_MedicalAidMovementType, EfDbContext>>().As<IRepository<common_MedicalAidMovementType>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<common_MonthlyScheduledWorkPoolUser, EfDbContext>>().As<IRepository<common_MonthlyScheduledWorkPoolUser>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<common_Municipality, EfDbContext>>().As<IRepository<common_Municipality>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<common_Note, EfDbContext>>().As<IRepository<common_Note>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<common_NoteModule, EfDbContext>>().As<IRepository<common_NoteModule>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<common_OccupationType, EfDbContext>>().As<IRepository<common_OccupationType>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<common_OneTimePin, EfDbContext>>().As<IRepository<common_OneTimePin>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<common_OptionItem, EfDbContext>>().As<IRepository<common_OptionItem>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<common_OptionItemValue, EfDbContext>>().As<IRepository<common_OptionItemValue>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<common_OptionType, EfDbContext>>().As<IRepository<common_OptionType>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<common_PayeeType, EfDbContext>>().As<IRepository<common_PayeeType>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<common_PensCareSetting, EfDbContext>>().As<IRepository<common_PensCareSetting>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<common_Period, EfDbContext>>().As<IRepository<common_Period>>();
			builder.RegisterType<EfRepository<common_PoolWorkFlow, EfDbContext>>().As<IRepository<common_PoolWorkFlow>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<common_PremiumComponent, EfDbContext>>().As<IRepository<common_PremiumComponent>>();
			builder.RegisterType<EfRepository<common_PreviousInsurer, EfDbContext>>().As<IRepository<common_PreviousInsurer>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<common_Priority, EfDbContext>>().As<IRepository<common_Priority>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<common_Referral, EfDbContext>>().As<IRepository<common_Referral>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<common_ReferralFeedback, EfDbContext>>().As<IRepository<common_ReferralFeedback>>();
			builder.RegisterType<EfRepository<common_ReferralNatureOfQuery, EfDbContext>>().As<IRepository<common_ReferralNatureOfQuery>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<common_ReferralPerformanceRating, EfDbContext>>().As<IRepository<common_ReferralPerformanceRating>>();
			builder.RegisterType<EfRepository<common_ReferralStatusChangeAudit, EfDbContext>>().As<IRepository<common_ReferralStatusChangeAudit>>();
			builder.RegisterType<EfRepository<common_ReportViewedAudit, EfDbContext>>().As<IRepository<common_ReportViewedAudit>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<common_ResolutionType, EfDbContext>>().As<IRepository<common_ResolutionType>>();
			builder.RegisterType<EfRepository<common_ServiceBusMessage, EfDbContext>>().As<IRepository<common_ServiceBusMessage>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<common_SftpRequest, EfDbContext>>().As<IRepository<common_SftpRequest>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<common_SftpRequestItem, EfDbContext>>().As<IRepository<common_SftpRequestItem>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<common_SftpRequestTypeConnection, EfDbContext>>().As<IRepository<common_SftpRequestTypeConnection>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<common_SftpResponse, EfDbContext>>().As<IRepository<common_SftpResponse>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<common_SlaItemTypeConfiguration, EfDbContext>>().As<IRepository<common_SlaItemTypeConfiguration>>();
			builder.RegisterType<EfRepository<common_SlaMovementAudit, EfDbContext>>().As<IRepository<common_SlaMovementAudit>>();
			builder.RegisterType<EfRepository<common_SlaStatusChangeAudit, EfDbContext>>().As<IRepository<common_SlaStatusChangeAudit>>();
			builder.RegisterType<EfRepository<common_TmpDebtorsDetail, EfDbContext>>().As<IRepository<common_TmpDebtorsDetail>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<common_UnderAssessReason, EfDbContext>>().As<IRepository<common_UnderAssessReason>>();
			builder.RegisterType<EfRepository<common_UpfrontCommClawbackratio, EfDbContext>>().As<IRepository<common_UpfrontCommClawbackratio>>();
			builder.RegisterType<EfRepository<common_UserReminder, EfDbContext>>().As<IRepository<common_UserReminder>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<common_Vat, EfDbContext>>().As<IRepository<common_Vat>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<common_WorkItemType, EfDbContext>>().As<IRepository<common_WorkItemType>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<finance_AbilityPosting, EfDbContext>>().As<IRepository<finance_AbilityPosting>>();
			builder.RegisterType<EfRepository<finance_AbilityPosting2, EfDbContext>>().As<IRepository<finance_AbilityPosting2>>();
			builder.RegisterType<EfRepository<finance_AbilityPosting3, EfDbContext>>().As<IRepository<finance_AbilityPosting3>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<finance_AbilityPostingAudit, EfDbContext>>().As<IRepository<finance_AbilityPostingAudit>>();
			builder.RegisterType<EfRepository<finance_BankAccountVerification, EfDbContext>>().As<IRepository<finance_BankAccountVerification>>();
			builder.RegisterType<EfRepository<finance_BankAccountVerificationRequest, EfDbContext>>().As<IRepository<finance_BankAccountVerificationRequest>>();
			builder.RegisterType<EfRepository<finance_BankStatement, EfDbContext>>().As<IRepository<finance_BankStatement>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<finance_BankStatementEntry, EfDbContext>>().As<IRepository<finance_BankStatementEntry>>();
			builder.RegisterType<EfRepository<finance_DiscountReport, EfDbContext>>().As<IRepository<finance_DiscountReport>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<finance_ProductCrossRefBankAccount, EfDbContext>>().As<IRepository<finance_ProductCrossRefBankAccount>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<finance_ProductCrossRefTranType, EfDbContext>>().As<IRepository<finance_ProductCrossRefTranType>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<finance_ProductCrossRefTranTypeTemp, EfDbContext>>().As<IRepository<finance_ProductCrossRefTranTypeTemp>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<finance_RefundHeader, EfDbContext>>().As<IRepository<finance_RefundHeader>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<finance_RefundHeaderDetail, EfDbContext>>().As<IRepository<finance_RefundHeaderDetail>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<Load_BankStatementEntryStaging, EfDbContext>>().As<IRepository<Load_BankStatementEntryStaging>>();
			builder.RegisterType<EfRepository<Load_Benefit, EfDbContext>>().As<IRepository<Load_Benefit>>();
			builder.RegisterType<EfRepository<Load_BenefitsUploadErrorAudit, EfDbContext>>().As<IRepository<Load_BenefitsUploadErrorAudit>>();
			builder.RegisterType<EfRepository<Load_BestmedMedicalAidData, EfDbContext>>().As<IRepository<Load_BestmedMedicalAidData>>();
			builder.RegisterType<EfRepository<Load_BulkAllocationFile, EfDbContext>>().As<IRepository<Load_BulkAllocationFile>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<Load_BulkManualAllocation, EfDbContext>>().As<IRepository<Load_BulkManualAllocation>>();
			builder.RegisterType<EfRepository<Load_BulkPaymentListing, EfDbContext>>().As<IRepository<Load_BulkPaymentListing>>();
			builder.RegisterType<EfRepository<Load_CdaPolicyScheduleEmailQueue, EfDbContext>>().As<IRepository<Load_CdaPolicyScheduleEmailQueue>>();
			builder.RegisterType<EfRepository<Load_ClientClass13Rates, EfDbContext>>().As<IRepository<Load_ClientClass13Rates>>();
			builder.RegisterType<EfRepository<Load_ClientClass4Rates, EfDbContext>>().As<IRepository<Load_ClientClass4Rates>>();
			builder.RegisterType<EfRepository<Load_ConsolidatedFuneral, EfDbContext>>().As<IRepository<Load_ConsolidatedFuneral>>();
			builder.RegisterType<EfRepository<Load_ConsolidatedFuneralBank, EfDbContext>>().As<IRepository<Load_ConsolidatedFuneralBank>>();
			builder.RegisterType<EfRepository<Load_ConsolidatedFuneralBenefit, EfDbContext>>().As<IRepository<Load_ConsolidatedFuneralBenefit>>();
			builder.RegisterType<EfRepository<Load_ConsolidatedFuneralDeduction, EfDbContext>>().As<IRepository<Load_ConsolidatedFuneralDeduction>>();
			builder.RegisterType<EfRepository<Load_ConsolidatedFuneralError, EfDbContext>>().As<IRepository<Load_ConsolidatedFuneralError>>();
			builder.RegisterType<EfRepository<Load_ConsolidatedFuneralFile, EfDbContext>>().As<IRepository<Load_ConsolidatedFuneralFile>>();
			builder.RegisterType<EfRepository<Load_ConsolidatedFuneralInsurance, EfDbContext>>().As<IRepository<Load_ConsolidatedFuneralInsurance>>();
			builder.RegisterType<EfRepository<Load_ConsolidatedFuneralMember, EfDbContext>>().As<IRepository<Load_ConsolidatedFuneralMember>>();
			builder.RegisterType<EfRepository<Load_DiscountFile, EfDbContext>>().As<IRepository<Load_DiscountFile>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<Load_DiscountFileAudit, EfDbContext>>().As<IRepository<Load_DiscountFileAudit>>();
			builder.RegisterType<EfRepository<Load_DiscountFileListing, EfDbContext>>().As<IRepository<Load_DiscountFileListing>>();
			builder.RegisterType<EfRepository<Load_ExternalPartnerPolicyData, EfDbContext>>().As<IRepository<Load_ExternalPartnerPolicyData>>();
			builder.RegisterType<EfRepository<Load_FuneralPremium, EfDbContext>>().As<IRepository<Load_FuneralPremium>>();
			builder.RegisterType<EfRepository<Load_Gpa, EfDbContext>>().As<IRepository<Load_Gpa>>();
			builder.RegisterType<EfRepository<Load_GpaFile, EfDbContext>>().As<IRepository<Load_GpaFile>>();
			builder.RegisterType<EfRepository<Load_GpaMember, EfDbContext>>().As<IRepository<Load_GpaMember>>();
			builder.RegisterType<EfRepository<Load_GroupPolicyScheduleBatch, EfDbContext>>().As<IRepository<Load_GroupPolicyScheduleBatch>>();
			builder.RegisterType<EfRepository<Load_IndustryRate, EfDbContext>>().As<IRepository<Load_IndustryRate>>();
			builder.RegisterType<EfRepository<Load_InsuredLife, EfDbContext>>().As<IRepository<Load_InsuredLife>>();
			builder.RegisterType<EfRepository<Load_InsuredLivesBenefit, EfDbContext>>().As<IRepository<Load_InsuredLivesBenefit>>();
			builder.RegisterType<EfRepository<Load_InsuredLivesCompany, EfDbContext>>().As<IRepository<Load_InsuredLivesCompany>>();
			builder.RegisterType<EfRepository<Load_InsuredLivesError, EfDbContext>>().As<IRepository<Load_InsuredLivesError>>();
			builder.RegisterType<EfRepository<Load_InsuredLivesMember, EfDbContext>>().As<IRepository<Load_InsuredLivesMember>>();
			builder.RegisterType<EfRepository<Load_InsuredLivesMessage, EfDbContext>>().As<IRepository<Load_InsuredLivesMessage>>();
			builder.RegisterType<EfRepository<Load_Lead, EfDbContext>>().As<IRepository<Load_Lead>>();
			builder.RegisterType<EfRepository<Load_LeadsProduct, EfDbContext>>().As<IRepository<Load_LeadsProduct>>();
			builder.RegisterType<EfRepository<Load_LeadsProductWizard, EfDbContext>>().As<IRepository<Load_LeadsProductWizard>>();
			builder.RegisterType<EfRepository<Load_LeadsUploadErrorAudit, EfDbContext>>().As<IRepository<Load_LeadsUploadErrorAudit>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<Load_LeadTimeTracker, EfDbContext>>().As<IRepository<Load_LeadTimeTracker>>();
			builder.RegisterType<EfRepository<Load_LegalHandOverFile, EfDbContext>>().As<IRepository<Load_LegalHandOverFile>>();
			builder.RegisterType<EfRepository<Load_LegalHandOverFileDetail, EfDbContext>>().As<IRepository<Load_LegalHandOverFileDetail>>();
			builder.RegisterType<EfRepository<Load_MemberCancel, EfDbContext>>().As<IRepository<Load_MemberCancel>>();
			builder.RegisterType<EfRepository<Load_MyValuePlu, EfDbContext>>().As<IRepository<Load_MyValuePlu>>();
			builder.RegisterType<EfRepository<Load_MyValuePlusBank, EfDbContext>>().As<IRepository<Load_MyValuePlusBank>>();
			builder.RegisterType<EfRepository<Load_MyValuePlusBenefit, EfDbContext>>().As<IRepository<Load_MyValuePlusBenefit>>();
			builder.RegisterType<EfRepository<Load_MyValuePlusDeduction, EfDbContext>>().As<IRepository<Load_MyValuePlusDeduction>>();
			builder.RegisterType<EfRepository<Load_MyValuePlusError, EfDbContext>>().As<IRepository<Load_MyValuePlusError>>();
			builder.RegisterType<EfRepository<Load_MyValuePlusFile, EfDbContext>>().As<IRepository<Load_MyValuePlusFile>>();
			builder.RegisterType<EfRepository<Load_MyValuePlusInsurance, EfDbContext>>().As<IRepository<Load_MyValuePlusInsurance>>();
			builder.RegisterType<EfRepository<Load_MyValuePlusMember, EfDbContext>>().As<IRepository<Load_MyValuePlusMember>>();
			builder.RegisterType<EfRepository<Load_PaymentStaging, EfDbContext>>().As<IRepository<Load_PaymentStaging>>();
			builder.RegisterType<EfRepository<Load_PaymentStagingFile, EfDbContext>>().As<IRepository<Load_PaymentStagingFile>>();
			builder.RegisterType<EfRepository<Load_PostRetirementMedicalAidData, EfDbContext>>().As<IRepository<Load_PostRetirementMedicalAidData>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<Load_PostRetirementMedicalAidInvoiceDetail, EfDbContext>>().As<IRepository<Load_PostRetirementMedicalAidInvoiceDetail>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<Load_PostRetirementMedicalAidInvoiceHeader, EfDbContext>>().As<IRepository<Load_PostRetirementMedicalAidInvoiceHeader>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<Load_PostRetirementMedicalAnnuityData, EfDbContext>>().As<IRepository<Load_PostRetirementMedicalAnnuityData>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<Load_PostRetirementMedicalAnnuityLatestData, EfDbContext>>().As<IRepository<Load_PostRetirementMedicalAnnuityLatestData>>();
			builder.RegisterType<EfRepository<Load_PremiumListing, EfDbContext>>().As<IRepository<Load_PremiumListing>>();
			builder.RegisterType<EfRepository<Load_PremiumListingBenefit, EfDbContext>>().As<IRepository<Load_PremiumListingBenefit>>();
			builder.RegisterType<EfRepository<Load_PremiumListingCompany, EfDbContext>>().As<IRepository<Load_PremiumListingCompany>>();
			builder.RegisterType<EfRepository<Load_PremiumListingError, EfDbContext>>().As<IRepository<Load_PremiumListingError>>();
			builder.RegisterType<EfRepository<Load_PremiumListingFile, EfDbContext>>().As<IRepository<Load_PremiumListingFile>>();
			builder.RegisterType<EfRepository<Load_PremiumListingMember, EfDbContext>>().As<IRepository<Load_PremiumListingMember>>();
			builder.RegisterType<EfRepository<Load_PremiumListingMessage, EfDbContext>>().As<IRepository<Load_PremiumListingMessage>>();
			builder.RegisterType<EfRepository<Load_PremiumListingPayment, EfDbContext>>().As<IRepository<Load_PremiumListingPayment>>();
			builder.RegisterType<EfRepository<Load_PremiumListingPaymentError, EfDbContext>>().As<IRepository<Load_PremiumListingPaymentError>>();
			builder.RegisterType<EfRepository<Load_PremiumListingPaymentFile, EfDbContext>>().As<IRepository<Load_PremiumListingPaymentFile>>();
			builder.RegisterType<EfRepository<Load_PremiumListingPolicyPremiumMovement, EfDbContext>>().As<IRepository<Load_PremiumListingPolicyPremiumMovement>>();
			builder.RegisterType<EfRepository<Load_PremiumPaymentDueCreditNote, EfDbContext>>().As<IRepository<Load_PremiumPaymentDueCreditNote>>();
			builder.RegisterType<EfRepository<Load_PremiumPaymentFileValidation, EfDbContext>>().As<IRepository<Load_PremiumPaymentFileValidation>>();
			builder.RegisterType<EfRepository<Load_PremiumPaymentFileValidationContent, EfDbContext>>().As<IRepository<Load_PremiumPaymentFileValidationContent>>();
			builder.RegisterType<EfRepository<Load_PremiumWriteOffContent, EfDbContext>>().As<IRepository<Load_PremiumWriteOffContent>>();
			builder.RegisterType<EfRepository<Load_PremiumWriteOffFile, EfDbContext>>().As<IRepository<Load_PremiumWriteOffFile>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<Load_QLinkPaymentRecordStaging, EfDbContext>>().As<IRepository<Load_QLinkPaymentRecordStaging>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<Load_Rate, EfDbContext>>().As<IRepository<Load_Rate>>();
			builder.RegisterType<EfRepository<Load_RatesUploadErrorAudit, EfDbContext>>().As<IRepository<Load_RatesUploadErrorAudit>>();
			builder.RegisterType<EfRepository<Load_StageGroupRisk, EfDbContext>>().As<IRepository<Load_StageGroupRisk>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<Load_StageGroupRiskError, EfDbContext>>().As<IRepository<Load_StageGroupRiskError>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<Load_StagePolicyIntegrationRequest, EfDbContext>>().As<IRepository<Load_StagePolicyIntegrationRequest>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<Load_StagePostRetirementMedicalAid, EfDbContext>>().As<IRepository<Load_StagePostRetirementMedicalAid>>();
			builder.RegisterType<EfRepository<Load_StagePostRetirementMedicalAnnuity, EfDbContext>>().As<IRepository<Load_StagePostRetirementMedicalAnnuity>>();
			builder.RegisterType<EfRepository<Load_ThirdPartyPolicyListing, EfDbContext>>().As<IRepository<Load_ThirdPartyPolicyListing>>();
			builder.RegisterType<EfRepository<Load_ThirdPartyPolicyListingError, EfDbContext>>().As<IRepository<Load_ThirdPartyPolicyListingError>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<payment_Allocation, EfDbContext>>().As<IRepository<payment_Allocation>>();
			builder.RegisterType<EfRepository<payment_AuditLog, EfDbContext>>().As<IRepository<payment_AuditLog>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<payment_EuropeAssistPayment, EfDbContext>>().As<IRepository<payment_EuropeAssistPayment>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<payment_FacsTransactionResult, EfDbContext>>().As<IRepository<payment_FacsTransactionResult>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<payment_FinancialPeriod, EfDbContext>>().As<IRepository<payment_FinancialPeriod>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<payment_GroupCompany, EfDbContext>>().As<IRepository<payment_GroupCompany>>();
			builder.RegisterType<EfRepository<payment_LastViewed, EfDbContext>>().As<IRepository<payment_LastViewed>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<payment_ManageFinanceUser, EfDbContext>>().As<IRepository<payment_ManageFinanceUser>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<payment_Note, EfDbContext>>().As<IRepository<payment_Note>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<payment_Payment, EfDbContext>>().As<IRepository<payment_Payment>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<payment_PaymentAccount, EfDbContext>>().As<IRepository<payment_PaymentAccount>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<payment_PaymentErrorAudit, EfDbContext>>().As<IRepository<payment_PaymentErrorAudit>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<payment_PaymentPensionReject, EfDbContext>>().As<IRepository<payment_PaymentPensionReject>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<payment_PaymentRejectionCode, EfDbContext>>().As<IRepository<payment_PaymentRejectionCode>>();
			builder.RegisterType<EfRepository<payment_PaymentSubmissionBatch, EfDbContext>>().As<IRepository<payment_PaymentSubmissionBatch>>();
			builder.RegisterType<EfRepository<payment_ProductCrossRefTranType, EfDbContext>>().As<IRepository<payment_ProductCrossRefTranType>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_AnnualIncrease, EfDbContext>>().As<IRepository<policy_AnnualIncrease>>();
			builder.RegisterType<EfRepository<policy_AuditLog, EfDbContext>>().As<IRepository<policy_AuditLog>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_BenefitCategoryExtension, EfDbContext>>().As<IRepository<policy_BenefitCategoryExtension>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_BenefitCategoryFuneral, EfDbContext>>().As<IRepository<policy_BenefitCategoryFuneral>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_BenefitCategoryOption, EfDbContext>>().As<IRepository<policy_BenefitCategoryOption>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_BenefitPayroll, EfDbContext>>().As<IRepository<policy_BenefitPayroll>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_BenefitRate, EfDbContext>>().As<IRepository<policy_BenefitRate>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_BenefitRateDetail, EfDbContext>>().As<IRepository<policy_BenefitRateDetail>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_BenefitRateSplit, EfDbContext>>().As<IRepository<policy_BenefitRateSplit>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_BenefitReinsAverage, EfDbContext>>().As<IRepository<policy_BenefitReinsAverage>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_CategoryInsuredCover, EfDbContext>>().As<IRepository<policy_CategoryInsuredCover>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_ChildCover, EfDbContext>>().As<IRepository<policy_ChildCover>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_Cover, EfDbContext>>().As<IRepository<policy_Cover>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_GroupSchemePremiumRoundingExclusion, EfDbContext>>().As<IRepository<policy_GroupSchemePremiumRoundingExclusion>>();
			builder.RegisterType<EfRepository<policy_InsuredLifeErrorAudit, EfDbContext>>().As<IRepository<policy_InsuredLifeErrorAudit>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_InsuredLifeFileAudit, EfDbContext>>().As<IRepository<policy_InsuredLifeFileAudit>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_InsuredSumAssured, EfDbContext>>().As<IRepository<policy_InsuredSumAssured>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_Insurer, EfDbContext>>().As<IRepository<policy_Insurer>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_InsurerGroupSchemeAccess, EfDbContext>>().As<IRepository<policy_InsurerGroupSchemeAccess>>();
			builder.RegisterType<EfRepository<policy_LastViewed, EfDbContext>>().As<IRepository<policy_LastViewed>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_Note, EfDbContext>>().As<IRepository<policy_Note>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_PersonInsuredCategory, EfDbContext>>().As<IRepository<policy_PersonInsuredCategory>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_Policy, EfDbContext>>().As<IRepository<policy_Policy>>();
			builder.RegisterType<EfRepository<policy_PolicyBenefit, EfDbContext>>().As<IRepository<policy_PolicyBenefit>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_PolicyBenefitCategory, EfDbContext>>().As<IRepository<policy_PolicyBenefitCategory>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_PolicyBenefitDetail, EfDbContext>>().As<IRepository<policy_PolicyBenefitDetail>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_PolicyBenefitOption, EfDbContext>>().As<IRepository<policy_PolicyBenefitOption>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_PolicyBinder, EfDbContext>>().As<IRepository<policy_PolicyBinder>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_PolicyBroker, EfDbContext>>().As<IRepository<policy_PolicyBroker>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_PolicyChangeBenefit, EfDbContext>>().As<IRepository<policy_PolicyChangeBenefit>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_PolicyChangeProduct, EfDbContext>>().As<IRepository<policy_PolicyChangeProduct>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_PolicyContact, EfDbContext>>().As<IRepository<policy_PolicyContact>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_PolicyDetail, EfDbContext>>().As<IRepository<policy_PolicyDetail>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_PolicyDocumentCommunicationMatrix, EfDbContext>>().As<IRepository<policy_PolicyDocumentCommunicationMatrix>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_PolicyExtendedSetting, EfDbContext>>().As<IRepository<policy_PolicyExtendedSetting>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_PolicyInsuredLife, EfDbContext>>().As<IRepository<policy_PolicyInsuredLife>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_PolicyInsuredLifeAdditionalBenefit, EfDbContext>>().As<IRepository<policy_PolicyInsuredLifeAdditionalBenefit>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_PolicyInvoice, EfDbContext>>().As<IRepository<policy_PolicyInvoice>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_PolicyInvoiceDetail, EfDbContext>>().As<IRepository<policy_PolicyInvoiceDetail>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_PolicyLifeExtension, EfDbContext>>().As<IRepository<policy_PolicyLifeExtension>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_PolicyMovement, EfDbContext>>().As<IRepository<policy_PolicyMovement>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_PolicyNote, EfDbContext>>().As<IRepository<policy_PolicyNote>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_PolicyOption, EfDbContext>>().As<IRepository<policy_PolicyOption>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_PolicyProductDeviation, EfDbContext>>().As<IRepository<policy_PolicyProductDeviation>>();
			builder.RegisterType<EfRepository<policy_PolicyScheduleOwnerMap, EfDbContext>>().As<IRepository<policy_PolicyScheduleOwnerMap>>();
			builder.RegisterType<EfRepository<policy_PolicyStatusActionsMatrix, EfDbContext>>().As<IRepository<policy_PolicyStatusActionsMatrix>>();
			builder.RegisterType<EfRepository<policy_PolicyStatusChangeAudit, EfDbContext>>().As<IRepository<policy_PolicyStatusChangeAudit>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_PolicyTemp, EfDbContext>>().As<IRepository<policy_PolicyTemp>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_PolicyTreaty, EfDbContext>>().As<IRepository<policy_PolicyTreaty>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_PostRetirementMedicalAnnuityInvoiceDetail, EfDbContext>>().As<IRepository<policy_PostRetirementMedicalAnnuityInvoiceDetail>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_PostRetirementMedicalAnnuityInvoiceHeader, EfDbContext>>().As<IRepository<policy_PostRetirementMedicalAnnuityInvoiceHeader>>();
			builder.RegisterType<EfRepository<policy_PremiumListingCompany, EfDbContext>>().As<IRepository<policy_PremiumListingCompany>>();
			builder.RegisterType<EfRepository<policy_PremiumListingError, EfDbContext>>().As<IRepository<policy_PremiumListingError>>();
			builder.RegisterType<EfRepository<policy_PremiumListingErrorAudit, EfDbContext>>().As<IRepository<policy_PremiumListingErrorAudit>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_PremiumListingFileAudit, EfDbContext>>().As<IRepository<policy_PremiumListingFileAudit>>();
			builder.RegisterType<EfRepository<policy_PremiumListingMember, EfDbContext>>().As<IRepository<policy_PremiumListingMember>>();
			builder.RegisterType<EfRepository<policy_PremiumListingPolicy, EfDbContext>>().As<IRepository<policy_PremiumListingPolicy>>();
			builder.RegisterType<EfRepository<policy_PremiumListingSchedule, EfDbContext>>().As<IRepository<policy_PremiumListingSchedule>>();
			builder.RegisterType<EfRepositorySoftDeleteEntities<policy_PremiumPayback, EfDbContext>>().As<IRepository<policy_PremiumPayback>>();
  
		}
	}
}
