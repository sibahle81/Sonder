using Microsoft.ServiceFabric.Services.Remoting;

using RMA.Common.Entities.DatabaseQuery;
using RMA.Service.Admin.MasterDataManager.Contracts.Enums;
using RMA.Service.Billing.Contracts.Entities;
using RMA.Service.Billing.Database.Entities;
using RMA.Service.ClientCare.Contracts.Entities.Member;
using RMA.Service.ClientCare.Contracts.Entities.Policy;

using System;
using System.Collections.Generic;
using System.Threading.Tasks;

using Refund = RMA.Service.Billing.Contracts.Entities.Refund;

namespace RMA.Service.Billing.Contracts.Interfaces
{
    public interface ITransactionService : IService
    {
        Task<List<Transaction>> GetTransactions();
        Task<Transaction> GetTransaction(int id);
        Task<int> AddTransaction(Transaction transaction);
        Task AddTransactions(List<Transaction> transactions);
        Task EditTransaction(Transaction transaction);
        Task AddCreditNote(CreditNoteAccount creditNoteAccount);
        Task EditCreditNote(CreditNoteAccount transaction);
        Task<Transaction> AddRefund(Refund refund);
        Task<decimal> GetPolicyPremiumBalance(int policyId);
        Task AssignTransactionsToInvoice(List<int> transactionIds, int invoiceId);
        Task<List<Transaction>> GetInvoiceTransactions(int invoiceId);
        Task<List<Transaction>> GetTransactionByRoleplayerId(int roleplayerId);
        Task<List<Transaction>> GetTransactionByRoleplayerIdAndTransactionType(int roleplayerId, TransactionTypeEnum transactionType);
        Task<Transaction> ReverseTransaction(Transaction transaction);
        Task<bool> ReversePaymentTransactionsByIds(TransactionsReversalRequest request);
        Task<int> AddClaimRecoveryInvoiceTransaction(Transaction transaction);
        Task<List<Transaction>> GetTransactionsForTransfer(string debtorNumber);
        Task CreditNoteReversal(CreditNoteReversals creditNoteReversal);
        Task<string> CreateRefundReferenceNumber();       
        Task AddDebitNoteTransactions(List<Transaction> transactions);
        Task<decimal> GetBalance(billing_Transaction transaction);
        Task<decimal> GetCurrentPeriodDebtorBalance(int rolePlayerId);
        Task<List<Transaction>> GetUnloggedTransactions();
        Task UpdateTransaction(List<Transaction> transactions);
        Task<decimal> GetDebtorNetBalance(int roleplayerId);
        Task<Transaction> CreateRefundDetailTransaction(int policyOwnerId, decimal amount, string reason, int linkingId);
        Task<decimal> GetTransactionBalance(Transaction transaction);
        Task LinkRefundToCreditNote(int refundTransactionId, int creditNoteId);
        Task<List<Transaction>> GetTransactionsForReAllocation(int roleplayerId, TransactionTypeEnum transactionType);
        Task<List<Transaction>> GetTransactionsForReAllocationByPolicy(int policyId, TransactionTypeEnum transactionType);
        Task<DateTime> DeriveTransactionDateBasedOnPeriodStatus(PeriodStatusEnum periodStatus);
        Task<List<RefundHeader>> GetDebtorRefunds(int rolePlayerId);
        Task<List<Transaction>> GetTransactionsForReversal(int roleplayerId, TransactionTypeEnum transactionType);
        Task<List<Transaction>> GetDebitTransactionsForAllocation(int roleplayerId, decimal amount);
        Task<List<CreditTransaction>> GetTransactionsForRefund(RefundTransactionsRequest request);
        Task<PagedRequestResult<Transaction>> GetStatement(int policyId, DateTime startDate, DateTime endDate, TransactionTypeEnum transactionType, PagedRequest request);
        Task<List<Statement>> GetStatementByRolePlayer(int rolePlayerId);
        Task<List<Statement>> GetStatementByPolicy(int policyId);
        Task<List<Statement>> GetStatementsForRefunds(int rolePlayerId);
        Task<List<Statement>> GetStatementsForReversals(int rolePlayerId);
        Task<PagedRequestResult<Transaction>> GetPagedDebtorTransactionHistory(int rolePlyerId, DateTime startDate, DateTime endDate, TransactionTypeEnum transactionType, PagedRequest request);
        Task<List<Statement>> GetDebtorTransactionHistory(int policyPayeeId);
        Task<List<Transaction>> GetCreditTransactionsWithBalances(int roleplayerId);
        Task<List<PremiumListingTransaction>> GetPremiumListingTransactions(int policyId);
        Task<PagedRequestResult<PremiumListingTransaction>> GetPremiumListingTransactionsForPolicy(PagedRequest request);
        Task<double> GetPremiumListingTransactionsTotal(int policyId);
        Task<List<Transaction>> GetPaymentsForReturnAllocation(int roleplayerId, decimal paymentReturnAmount);
        Task<List<Transaction>> GetTransactionByRoleplayerIdAndDate(int roleplayerId, TransactionTypeEnum transactionType, DateTime startDate, DateTime endDate);
        Task<List<Statement>> GetStatementsForInterestReversals(int rolePlayerId);
        Task<bool> ReverseDebitTransactionsForOpenPeriodByIds(List<int> transactionIds);
        Task<bool> BackDateTransactions(TransactionsBackDatingRequest request);
        Task AddPremiumListingAdjustment();
        Task<List<Transaction>> GetDebtorsActiveDebitTransactions(int rolePlayerId);
        Task<List<Transaction>> GetTransactionsByIds(List<int> transactionIds);
        Task AdjustInterestForBudgetedDeclarations();
        Task<PagedRequestResult<Statement>> GetStatementByPolicyPaged(int policyId, PagedRequest request);
        Task<List<Statement>> GetDebtorInterestTransactionHistory(int rolePlayerId);
        Task<bool> DoDownwardTransactionAdjustment(TransactionAdjustment request);
        Task<bool> DoUpwardTransactionAdjustment(TransactionAdjustment request);
        Task<bool> DoOpenPeriodInterestAdjustment(TransactionAdjustment request);
        Task<List<Statement>> GetDebtorInvoiceTransactionHistory(int rolePlayerId);
        Task<List<PendingInterestDate>> GetInvoiceMonthsPendingInterest(int invoiceTransactionId);
        Task<bool> CreateAdhocInterestForSpecifiedDates(AdhocInterestRequest request);
        Task<bool> WriteOffBadDebt(BadDebtWriteOffRequest request);
        Task<List<Statement>> GetDebtorInvoiceTransactionHistoryByPolicy(DebtorStatementRequest request);
        Task<List<Statement>> GetDebtorInterestTransactionHistoryByPolicy(DebtorStatementRequest request);
        Task<List<Statement>> GetInterestTransactionsWrittenOffByPolicy(DebtorStatementRequest request);
        Task<List<Statement>> GetInvoiceTransactionsWrittenOffByPolicy(DebtorStatementRequest request);
        Task<bool> ReinstateBadDebt(BadDebtReinstateRequest request);
        Task<List<Statement>> GetDebtorInvoiceTransactionHistoryForAdhocInterest(int roleplayerId);
        Task ReverseInterestInClosedPeriod(Statement item, int roleplayerId, string reason);
        Task ReverseInterestInOpenPeriod(Statement item, int roleplayerId, string reason);
        Task<List<Transaction>> GetTransactionsForTransferByAccountNumber(InterDebtorTransactionRequest request);
        Task<List<DebtorAccountNumberModel>> GetDebtorsByAccountNumber(InterDebtorToDebtorRequest request);
        Task<bool> ReallocateCredit(TransactionTransfer transactionTransfer);
        Task<List<Statement>> GetDebtorOpenTransactions(DebtorOpenTransactionsRequest request);
        Task<decimal> GetHistoryDebtorBalance(int rolePlayerId);
        Task<bool> ReallocateDebtorBalance(DebtorCreditReallocationRequest request);
        Task<List<PremiumListingTransaction>> GetPremiumListingTransactionsByPaymentDate(List<int> childPolicyIds, DateTime paymentDate);
        Task<decimal> GetReclassificationBalanceByPolicy(int roleplayerId, int policyId);
        Task<decimal> GetCancellationBalanceByPolicy(int roleplayerId, int policyId);
        Task<List<PremiumListingTransaction>> GetPremiumListingTransactionsByPaymentFileId(int paymentFileId);
        Task<decimal> GetTotalAmountPaidToPremiumListingByTransactionId(int transactionId);
        Task<int> CreateRefund(Refund refund);
        Task<List<PaymentAllocationRecord>> AllocatePaymentsToPremiumListingTransactions(Guid fileIdentifier, int transactionId, string modifiedBy, PaymentAllocationScheme paymentAllocationScheme);
        Task<List<PremiumListingTransaction>> GetPremiumListingTransactionsByInvoiceDate(List<int> childpolicyIds, DateTime invoiceDate);
        Task<decimal> GetDebtorCreditBalance(int roleplayerId);
        Task<List<DebtorProductCategoryBalance>> GetDebtorReclassficationRefundBreakDown(int roleplayerId);
        Task<List<DebtorProductCategoryBalance>> GetDebtorCancellationRefundBreakDown(int roleplayerId);
        Task<List<Transaction>> GetPaymentTransactionsByRoleplayerIdBankStatementReference(int roleplayerId, string bankStatementReference);
        Task<List<Statement>> GetTransactionsWrittenOffByRolePlayer(DebtorStatementRequest request);
        Task<decimal> GetDebtorClaimRecoveriesBalance(int rolePlayerId);
        Task<List<Transaction>> GetBouncedTransactionsForTransfer(InterDebtorTransactionRequest request);
        Task<List<Transaction>> GetPremiumAllocatedTransactionsByRoleplayer(int roleplayerId, TransactionTypeEnum transactionType, DateTime startDate, DateTime endDate);
        Task<List<int>> AddAdjustmentCreditNote(CreditNoteAccount creditNoteAccount);
        Task<List<Transaction>> GetTransactionsByDateAndPolicyId(int policyId, DateTime date);
        Task<bool> RealeaseRefundForPayment(Refund refund);
        Task<PagedRequestResult<Transaction>> GetPagedTransactions(TransactionSearchRequest transactionSearchRequest);
    }
}
