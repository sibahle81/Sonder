<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Xml" #>
<#@ output extension=".cs" #>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//		
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Autofac;
using RMA.Common.Constants;
using RMA.Common.Service.Extensions;

namespace RMA.Service.ScanCare
{
    public partial class ContainerConfiguration
    {
        private static void HostOurServicesPartial(ContainerBuilder builder)
        {
<#
	var path = Host.ResolvePath("Services");
	var split = path.Split('\\');
	var name = split[split.Length - 2];
	var newPath = path.Replace(name, $"{name}.Contracts").Replace("Services", "Interfaces");
	StringBuilder sm = new StringBuilder();
	StringBuilder am = new StringBuilder();
	StringBuilder api = new StringBuilder();
	StringBuilder unitTest = new StringBuilder();

	sm.AppendLine();
	sm.AppendLine("    <!--Generated by T4 Template-->");

	am.AppendLine();
	am.AppendLine("    <!--Generated by T4 Template-->");
	am.AppendLine("    <Service Name=\"RMA.Service.ScanCare.Api\" ServicePackageActivationMode=\"ExclusiveProcess\">");
	am.AppendLine("      <StatelessService ServiceTypeName=\"RMA.Service.ScanCare.ApiType\" InstanceCount=\"[Api_InstanceCount]\">");
	am.AppendLine("        <SingletonPartition />");
	am.AppendLine("      </StatelessService>");
	am.AppendLine("    </Service>");
	am.AppendLine("    <!--Remoting Services-->");

	foreach (var file in System.IO.Directory.GetFiles(newPath, "*.cs", SearchOption.AllDirectories))
	{
		var fileName = Path.GetFileNameWithoutExtension(file);
		var directory = System.IO.Path.GetDirectoryName(file).Split('\\');
		var dirName = directory[directory.Length - 1];
		var interfaceNs = System.IO.File.ReadAllLines(file).First(l => l.StartsWith("namespace ")).Replace("namespace ", "");
		var serviceNs = interfaceNs.Replace("Interfaces", "Services").Replace(".Contracts", "");
		
		var serviceName = "";

		if (fileName.Contains("Service"))
		{
			serviceName = fileName.Substring(1, fileName.Length-8) + "Facade";
	
			api.AppendLine($"            builder.UseStatelessService<{interfaceNs}.{fileName}>(AppNames.ScanCare, AppPrefix.{dirName});");
			unitTest.AppendLine($"            builder.RegisterType<{serviceNs}.{serviceName}>().AsSelf().As<{interfaceNs}.{fileName}>();");
#>
            builder.HostStatelessService<<#= $"{interfaceNs}.{fileName}" #>, <#= $"{serviceNs}.{serviceName}" #>>(AppNames.ScanCare, AppPrefix.<#= dirName #>);
<#

		}
		else
		{
			serviceName = fileName.Substring(1);
#>
            builder.HostServiceBusListener<<#= $"{interfaceNs}.{fileName}" #>, <#= $"{serviceNs}.{serviceName}" #>>(AppPrefix.<#= dirName #>);
<#
		}

		sm.AppendLine($"    <StatelessServiceType ServiceTypeName=\"{dirName.ToLower()}/{fileName}\" />");

		am.AppendLine($"    <Service Name=\"{dirName.ToLower()}/{fileName}\">");
		am.AppendLine($"      <StatelessService ServiceTypeName=\"{dirName.ToLower()}/{fileName}\" InstanceCount=\"[Service_InstanceCount]\">");
		am.AppendLine("        <SingletonPartition />");
		am.AppendLine("      </StatelessService>");
		am.AppendLine("    </Service>");

	}
#>
            // DO NOT EDIT THIS FILE MANUALLY, IT IS GENERATED FROM A TEMPLATE!
			
            //START OF API References
<#
	foreach (var file in System.IO.Directory.GetFiles(newPath, "*.cs", SearchOption.AllDirectories))
	{
		var fileName = Path.GetFileNameWithoutExtension(file);
		var directory = System.IO.Path.GetDirectoryName(file).Split('\\');
		var dirName = directory[directory.Length - 1];
		var interfaceNs = System.IO.File.ReadAllLines(file).First(l => l.StartsWith("namespace ")).Replace("namespace ", "");
		if (fileName.Contains("Service"))
		{
#>
			//builder.UseStatelessService<<#= $"{interfaceNs}.{fileName}" #>>(AppNames.ScanCare, AppPrefix.<#= dirName #>);
<#
		}
	}
#>
            //START OF UNIT TEST REFERENCES
<#
	foreach (var file in System.IO.Directory.GetFiles(newPath, "*.cs", SearchOption.AllDirectories))
	{
		var fileName = Path.GetFileNameWithoutExtension(file);
		var directory = System.IO.Path.GetDirectoryName(file).Split('\\');
		var dirName = directory[directory.Length - 1];
		var interfaceNs = System.IO.File.ReadAllLines(file).First(l => l.StartsWith("namespace ")).Replace("namespace ", "");
		var serviceNs = interfaceNs.Replace("Interfaces", "Services").Replace(".Contracts", "");
		
		if (fileName.Contains("Service"))
		{
			var serviceName = fileName.Substring(1, fileName.Length - 8) + "Facade";
#>
			//builder.RegisterType<<#= $"{serviceNs}.{serviceName}" #>>().AsSelf().As<<#= $"{interfaceNs}.{fileName}" #>>();
<#
		}
	}

	var manifestFile = Host.ResolvePath("PackageRoot");
	var manifestPath = System.IO.Path.Combine(manifestFile, "ServiceManifest.xml");
	XmlDocument smDoc = new XmlDocument();
	smDoc.Load(manifestPath);
	var serviceType = smDoc.GetElementsByTagName("ServiceTypes");
	serviceType.Item(0).InnerXml = sm.ToString();
	smDoc.Save(manifestPath);

	var appManifest = Host.ResolvePath("PackageRoot");
	var appManifestPath = System.IO.Path.Combine(appManifest, "ApplicationManifest.xml").Replace("RMA.Service.ScanCare\\PackageRoot", "RMA.ServiceFabric.ScanCare\\ApplicationPackageRoot");
	XmlDocument amDoc = new XmlDocument();
	amDoc.Load(appManifestPath);
	var defaultServices = amDoc.GetElementsByTagName("DefaultServices");
	defaultServices.Item(0).InnerXml = am.ToString();
	amDoc.Save(appManifestPath);
#>
        }
    }
}
