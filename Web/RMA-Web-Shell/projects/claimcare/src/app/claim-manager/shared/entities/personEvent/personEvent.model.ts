import { BaseClass } from 'projects/shared-models-lib/src/lib/common/base-class';
import { Claim } from '../funeral/claim.model';
import { MedicalReportModel } from '../funeral/medicalReport.model';
import { PersonEventNoteModel } from './personEventNote.model';
import { PersonEventDeathDetailModel } from './personEventDeathDetail.model';
import { FuneralRuleResult } from '../funeral/funeral-rule-result';
import { PersonEventDiseaseDetailModel } from './personEventDiseaseDetail.model';
import { PersonEventNoiseDetailModel } from './personEventNoiseDetail.model';
import { ClaimBucketClassModel } from './claimBucketClass.model';
import { EventModel } from './event.model';
import { RolePlayer } from 'projects/clientcare/src/app/policy-manager/shared/entities/roleplayer';
import { PersonEventAccidentDetail } from '../funeral/person-event-accident-detail';
import { DocumentSetEnum } from 'projects/shared-models-lib/src/lib/enums/document-set.enum';
import { PhysicalDamage } from '../physical-damage';
import { ClaimTypeEnum } from 'projects/shared-models-lib/src/lib/enums/claim-type-enum';
import { SuspiciousTransactionStatusEnum } from 'projects/shared-models-lib/src/lib/enums/suspicious-transaction-status-enum';
import { FirstMedicalReportForm } from 'projects/digicare/src/app/medical-form-manager/models/first-medical-report-form';
import { PersonEventQuestionnaire } from './personEventQuestionnaire.model';
import { ProgressMedicalReportForm } from 'projects/digicare/src/app/medical-form-manager/models/progress-medical-report-form';
import { FinalMedicalReportForm } from 'projects/digicare/src/app/medical-form-manager/models/final-medical-report-form';
import { PersonEventStpExitReason } from './person-event-stp-exit-reason.model';
import { EventTypeEnum } from '../../enums/event-type-enum';
import { ClaimAccidentCloseLetterTypeEnum } from 'projects/shared-models-lib/src/lib/enums/claim-accident-close.lettertype.enum';
import { PersonEventClaimRequirement } from '../person-event-claim-requirement';
import { ClaimAdditionalRequiredDocument } from '../claim-additional-required-document';
import { PersonEventAssaultDetail } from '../funeral/person-event-assault-detail';
import { PersonEventStatusEnum } from 'projects/shared-models-lib/src/lib/enums/person-event-status.enum';
import { Earning } from '../earning-model';
import { ClaimDisabilityPension } from 'projects/claimcare/src/app/claim-manager/shared/entities/claim-disability-pension';
import { ClaimEstimate } from './claimEstimate';

export class PersonEventModel extends BaseClass {
    personEventId: number;
    personEventReferenceNumber: string;
    eventId: number;
    personEmploymentId: number | null;
    companyRolePlayerId: number | null;
    insuredLifeId: number;
    claimantId: number;
    informantId: number;
    personEventStatus: PersonEventStatusEnum;
    personEventBucketClassId: number;
    dateReceived: Date;
    dateCaptured: Date;
    capturedByUserId: number;
    dateSubmitted: Date;
    submittedByUserId: number | null;
    dateAuthorised: Date;
    authorisedByUserId: number | null;
    dateRejected: Date;
    rejectedByUserId: number | null;
    rejectionReason: string;
    isDeleted: boolean;
    createdBy: string;
    createdDate: Date;
    modifiedBy: string;
    modifiedDate: Date;
    firstName: string;
    lastName: string;
    documentSetEnum: DocumentSetEnum;
    isVopdOverridden: boolean;
    insuranceTypeId: number | null;
    isSpectacles: boolean | null;
    isDentures: boolean | null;
    isAssault: boolean | null;
    isHijack: boolean | null;
    claimType: ClaimTypeEnum | null;
    suspiciousTransactionStatus: SuspiciousTransactionStatusEnum;
    isStraightThroughProcess: boolean;
    dateOfStabilisation?: Date;
    isFatal: boolean;

    assignedToUserId: number;
    assignedDate: Date;

    earnings: Earning[];
    personEventNoiseDetail: PersonEventNoiseDetailModel;
    personEventAccidentDetail: PersonEventAccidentDetail;
    personEventAssaultDetail: PersonEventAssaultDetail;
    personEventDiseaseDetail: PersonEventDiseaseDetailModel;
    personEventDeathDetail: PersonEventDeathDetailModel;

    rolePlayers: RolePlayer[];
    rolePlayer: RolePlayer;
    beneficiaries: RolePlayer[];
    claims: Claim[];
    medicalReports: MedicalReportModel[];
    personEventNotes: PersonEventNoteModel[];
    claimBucketClass: ClaimBucketClassModel;
    event: EventModel;
    physicalDamages: PhysicalDamage[];

    policyIds: number[];
    ruleResult: FuneralRuleResult;
    isApproved: boolean;
    claimPolicyId: number;
    anyEligiblePolicies: boolean;
    firstMedicalReport: FirstMedicalReportForm;
    personEventQuestionnaire: PersonEventQuestionnaire;
    progressMedicalReportForms: ProgressMedicalReportForm[];
    finalMedicalReport: FinalMedicalReportForm;
    personEventStpExitReasons: PersonEventStpExitReason[];
    claimCloseLetter: ClaimAccidentCloseLetterTypeEnum;
    claimAccidentCloseLetterTypeEnum: ClaimAccidentCloseLetterTypeEnum;
    personEventClaimRequirements: PersonEventClaimRequirement[];
    claimAdditionalRequiredDocuments: ClaimAdditionalRequiredDocument[];
    claimDisabilityPensions: ClaimDisabilityPension[];
    claimEstimates: ClaimEstimate[];
    
    //ONLY USED IN FRONT END TO POPULATE
    eventRolePlayerId: number;
    eventType: EventTypeEnum;
    eventDate: string | Date;
    sendBrokerEmail: boolean;
    rolePlayerExist = false;
    claimInvoiceId: number;
}
