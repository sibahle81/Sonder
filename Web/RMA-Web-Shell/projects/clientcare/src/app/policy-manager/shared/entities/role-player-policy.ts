import { Benefit } from '../../../product-manager/models/benefit';
import { Brokerage } from '../../../broker-manager/models/brokerage';
import { Representative } from '../../../broker-manager/models/representative';
import { ProductOption } from '../../../product-manager/models/product-option';
import { Note } from 'projects/shared-components-lib/src/lib/notes/note';
import { RolePlayer } from './roleplayer';
import { PolicyInsuredLife } from './policy-insured-life';
import { RefundTypeEnum } from 'projects/fincare/src/app/shared/enum/refund-type.enum';
import { Invoice } from 'projects/fincare/src/app/shared/models/invoice';
import { ReinstateReasonEnum } from '../enums/reinstate-reason.enum';
import { PolicyLifeExtension } from './policy-life-extension.model';
import { PolicyContact } from './policy-contact';
import { PolicyDocumentCommunicationMatrix } from './policy-document-communication-matrix';

export class RolePlayerPolicy {
  policyId: number;
  insurerId: number;
  insurer: string;
  brokerageId: number;
  productOptionId: number;
  representativeId: number;
  juristicRepresentativeId: number;
  policyOwnerId: number;
  policyPayeeId: number;
  paymentFrequency: number;
  paymentMethod: number;
  policyNumber: string;
  clientReference: string;
  policyInceptionDate: Date;
  parentPolicyInceptionDate: Date;
  expiryDate: Date;
  cancellationInitiatedDate: Date;
  cancellationInitiatedBy: string;
  cancellationDate: Date;
  firstInstallmentDate: Date;
  lastInstallmentDate: Date;
  regularInstallmentDayOfMonth: number;
  decemberInstallmentDayOfMonth: number;
  policyStatus: number;
  annualPremium: number;
  installmentPremium: number;
  isDeleted: boolean;
  createdBy: string;
  createdDate: Date;
  modifiedBy: string;
  modifiedDate: Date;
  benefits: Benefit[];
  brokerage: Brokerage[];
  juristicRepresentative: Representative;
  representative: Representative;
  productOption: ProductOption;
  policyNotes: Note[];
  adminPercentage = 0.0;
  commissionPercentage = 0.0;
  binderFeePercentage = 0.0;
  premiumAdjustmentPercentage = 0.0;
  lastLapsedDate: Date;
  lapsedCount: number;
  lastReinstateDate: Date;
  policyCancelReason: number;
  policyOwner: RolePlayer;
  policyStatusText: string;
  quoteId: number;
  isEuropAssist: boolean;
  europAssistEffectiveDate: Date;
  europAssistEndDate: Date;
  reinstateReason: ReinstateReasonEnum;
  isAnnualIncrease:boolean;
  annualIncreaseType:string;
  brokerPolicyContact: PolicyContact; 
  adminPolicyContact: PolicyContact; 
  firstAlternativePolicyContact: PolicyContact; 
  secondAlternativePolicyContact: PolicyContact;
  policyDocumentCommunicationMatrix: PolicyDocumentCommunicationMatrix;

  // model binding
  // the below properties should be in a new model that extends RoleplayerPolicy
  selected: boolean;
  policyMovementId: number;
  joinedDate: Date;
  insuredLives: PolicyInsuredLife[];
  continuationEffectiveDate: Date;
  lapseEffectiveDate: Date;
  adhocDebitDate: Date;
  policyPauseDate: Date;
  eligibleForRefund: boolean;
  refundType: RefundTypeEnum;
  isGroupPolicy: boolean;
  refundAmount: number;
  actualPremiumPaid: number;
  continuationInvoicesGenerated: boolean;
  reinstateInvoicesGenerated: boolean;
  outStandingInvoices: Invoice[];
  parentPolicyId: number;
  parentPolicyNumber: string;
  isExpanded: boolean;
  policyLifeExtension:PolicyLifeExtension;
}
