import { Person } from './person';
import { RolePlayerBankingDetail } from './role-player-banking-detail';
import { RolePlayerAddress } from './role-player-address';
import { RolePlayerPolicy } from './role-player-policy';
import { RolePlayerRelation } from './roleplayer-relation';
import { BodyCollector } from './body-collector';
import { FuneralParlor } from './funeral-parlor';
import { Undertaker } from './Undertaker';
import { Company } from './company';
import { ForensicPathologist } from './forensic-pathologist';
import { ClaimantModel } from './claimant.model';
import { InformantModel } from './informant.model';
import { MedicalServiceProviderModel } from './medical-service-provider.model';
import { Note } from './note.model';
import { RolePlayerBenefit } from './role-player-benefit';
import { RolePlayerTypeEnum } from '../enums/role-player-type-enum';
import { PreviousInsurerRolePlayer } from './previous-insurer-roleplayer';
import { FinPayee } from './finpayee';
import { ClientTypeEnum } from '../enums/client-type-enum';
import { RolePlayerContact } from './roleplayer-contact';
import { Declaration } from './declaration';
import { NatureOfBusiness } from './nature-of-business';
import { RolePlayerBenefitWaitingPeriodEnum } from '../enums/roleplayer-benefit-waiting-period.enum';
import { ClientVopdResponse } from './vopd-response';
import { RolePlayerIdentificationType } from '../enums/roleplayer-identification-type-enum';
import { HealthCareProviderModel } from './healthare-provider-model';
import { MemberStatusEnum } from '../enums/member-status-enum';

export class RolePlayer {
  rolePlayerId: number;
  displayName: string;
  tellNumber: string;
  cellNumber: string;
  emailAddress: string;
  preferredCommunicationTypeId: number;
  rolePlayerIdentificationType: RolePlayerIdentificationType;
  isDeleted: boolean;
  createdBy: string;
  createdDate: Date;
  modifiedBy: string;
  modifiedDate: Date;
  policy: RolePlayerPolicy = new RolePlayerPolicy();
  caseTypeId: number;
  representativeId: number;
  accountExecutiveId: number;
  productId: number;
  company: Company;
  rolePlayerBankingDetails: RolePlayerBankingDetail[];
  rolePlayerAddresses: RolePlayerAddress[];
  person: Person; 
  claimant: ClaimantModel;
  informant: InformantModel;
  healthCareProvider: HealthCareProviderModel;
  medicalServiceProvider: MedicalServiceProviderModel;
  forensicPathologist: ForensicPathologist;
  funeralParlor: FuneralParlor;
  undertaker: Undertaker;
  bodyCollector: BodyCollector;
  rolePlayerNotes: Note[];
  fromRolePlayers: RolePlayerRelation[] = [];
  toRolePlayers: RolePlayerRelation[] = [];
  benefits: RolePlayerBenefit[];
  policies: RolePlayerPolicy[];
  policyPayees: RolePlayerPolicy[];
  rolePlayerPolicy: RolePlayerPolicy;
  isVopdRequired: boolean;
  insuredLifeRemovalReason: number;
  endDate: Date;
  keyRoleTypeId: number;
  keyRoleType: string;
  joinDate: Date;
  rolePlayerTypeId: number;
  rolePlayerType: RolePlayerTypeEnum;
  previousInsurerRolePlayers: PreviousInsurerRolePlayer[] = [];
  rolePlayerContacts: RolePlayerContact[] = [];
  finPayee: FinPayee;
  natureOfBusiness: NatureOfBusiness = new NatureOfBusiness();
  policyNumber: string;
  declarations: Declaration[];
  rolePlayerBenefitWaitingPeriod: RolePlayerBenefitWaitingPeriodEnum;
  clientVopdResponse: ClientVopdResponse;
  clientType = ClientTypeEnum.All;
  memberStatus: MemberStatusEnum;
}
